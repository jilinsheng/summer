#Reports 基本配置文件

# 多报表项目支持，这个功能支持是 V2.1.5.0版以后版本支持的功能，如果您的版本低于V2.1.5.0则
# 可以忽略这个配置
# 值以及含义，这个值和下面的REPORT_HOME_TYPE 与 REPORT_HOME 有关系。
# True：启用多项目功能，REPORT_HOME_TYPE ，REPORT_HOME 将不再起作用
#       其多项目的配置信息在 classes下maxreportprojects.xml内配置。
#       maxreportprojects.xml缺省存放位置在classes下，可以通过修改web.xml中的参数配置修改其位置
#       配置多个项目可以参考 maxreportprojects.xml 内的范例
#
# False：禁用多项目功能，仍然以REPORT_HOME_TYPE ，REPORT_HOME设置的项目信息为准。
#
MULTI_PROJECTS=True


# 设置REPORT_HOME的路径是绝对路径还是相对路径
# 值：
#    0 ：绝对路径，报表项目的绝对路径。
#    1 ：相对路径，针对你的WEB项目的相对路径
#   注意：当你使用模式1，并你使用将你的整个项目打包成War文件，
#                        并你的WEB-Server并不自动展开项目成目录的话（如：WebLogic），
                         并你需要使用到了自动运行功能
#          你将不能使用模式1，MaxReports自动运行模式将对备份文件写操作。
#          
#          直接通过目录结构部署应用，则不存在以上问题。
#   MaxReports自动运行与数据缓冲的数据备份均保存在 <报表项目路径>/historyrpts/ 目录内。 
REPORT_HOME_TYPE=1

#
# REPORT_HOME为报表项目基本路径，即包含 .ydr 文件的目录
# 根据 REPORT_HOME_TYPE 的设置这里填写对应的目录
# 如果 REPORT_HOME_TYPE=0 举例 Windows下：C:/MaxReport/reportdemo/  Unix下：/home/maxreport/reportdemo/
# 如果 REPORT_HOME_TYPE=1 举例 http://www.ccsw.com.cn/ccsw/sysreport/reportdemo/ 或者 /sysreport/reportdemo
#REPORT_HOME=/reportdemo
REPORT_HOME=/page/paperprint/paperprint

#
# REPORTPROJECT_NAME 指定报表项目的项目名称 即在设计器内新建项目的英文名称（项目文件名称）
# 
#
REPORTPROJECT_NAME=paperprint

# 设置调试等级
# 0 : 不输出任何调试信息
# 1 : 输出关键调试信息
# 3 : 输出详细调试信息
# 7 : 输出全部调试信息
REPORT_DEBUG_LEVEL=1

# 设置Debug Log文件的文件全路径，当此项不设置时，输出信息输出到WEB-SERVER控制台
# 举例：Windows：C:\MaxReport\reportdebug.log Unix：/home/maxreport/reportdebug.log
# 
#REPORT_DEBUG_LOGFILE=C:/MaxReport/reportdebug.log

# 设置报表引擎扩展类，当在报表运行阶段（或自动运行）时处理报表相关信息，如参数、是否数据缓冲等。
# 举例：com.yanding.demo.ReportsEngineExpandDemo
#
REPORTENGINE_EXPAND=com.yanding.demo.ReportsEngineExpandDemo

# 设置报表提交的数据处理类，在这个类内处理报表提交到服务器的数据。
# 举例：com.yanding.demo.ReportSubmitExpendDemo
#
REPORTSUBMIT_EXPAND=com.yanding.demo.ReportSubmitExpendDemo

#设置服务器SQL语句（存储过程）执行时的时间溢出
#值：为秒。其调用Java 之PreparedStatement类的 setQueryTimeout方法
#REPORT_QUERY_TIMEOUT=0

# 设置你的SQL语句的编码方式，即提交给你的数据库服务器的SQL语句的编码方式，这一般和你的数据库服务器的语言设置有关系。
# SQL的缺省的编码是 GB2312 ；也可以在创建报表引擎时使用 setChartsetEncode(FromCode,ToCode,1) 来设置,详细参见接口说明
# 语法：
#      REPORT_SQL_ENCODE=FromCode;ToCode
# 如果你的数据库服务器需要ISO的SQL编码方式，则设置
# REPORT_SQL_ENCODE=GB2312;ISO-8859-1
#
#REPORT_SQL_ENCODE=

# 设置SQL语句执行结果的编码转换方式，即从服务器取出数据后数据的编码方式。
# 数据结果缺省的编码是你的数据库设置的编码方式;也可以在创建报表引擎时使用 setChartsetEncode(FromCode,ToCode,2) 来设置,详细参见接口说明
# 语法：
#      REPORT_RESULTSET_ENCODE=FromCode;ToCode
# 如：你的数据库设置编码方式为：ISO-8859-1的，则应该如下设置，才可显示正常的中文：
# REPORT_SQL_ENCODE=ISO-8859-1;GB2312
#
#REPORT_RESULTSET_ENCODE=


# 设置服务器编码方式，用于设置服务器的操作系统编码。如安装的英文版的linux系统
#
#
#REPORT_SERVER_ENCODE=UTF-8

#
# 用户数据库获取连接类，类继承 com.syssoft.report.DBConnFace 接口，在Demo中有一个数据库连接池管理类，
# 用户可以使用自己的数据库管理类库，但对于报表获取数据库连接类必须继承接口 com.syssoft.report.DBConnFace
# 更加详细的信息请参见帮助文档的 部署 一章。
#
DBCONN_CLASS=com.yanding.db.ConnectionFactory


# 服务器监控配置，以及服务器辅助工具的访问地址，正式版提供的功能；
# 注：此处url地址为安装服务器辅助工具的机器的ip地址，端口号可以设置为一个四位数字的端口，必须保持
#和MaxReportsTools.exe中的端口号一致。
REPORT_TOOLS=10.1.1.61:8088

#
# MAX_REPORTVIEWER_VERSION 指定当前报表预览器（插件）的版本，如果发布了新的版本，用户需要更改此值。
#
MAX_REPORTVIEWER_VERSION=2,8,2,2