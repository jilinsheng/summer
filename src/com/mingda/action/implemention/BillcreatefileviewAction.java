/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.implemention;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Session;

import com.mingda.common.Pager;
import com.mingda.common.SessionFactory;
import com.mingda.dao.ImplTInterfacedefineDAO;
import com.mingda.dao.SysTOrganizationDAO;
import com.mingda.entity.SysTEmployee;
import com.mingda.entity.SysTOrganization;

@SuppressWarnings("unchecked")
public class BillcreatefileviewAction extends Action {
	static Logger log = Logger.getLogger(BillcreatefileviewAction.class);

	@SuppressWarnings("rawtypes")
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String monthid = request.getParameter("monthid");
		HttpSession hsession = request.getSession();
		Session session = SessionFactory.getSession();

		String curpage = request.getParameter("cur_page");
		String sql = "";
		String type = "";
		String value = "";

		List<Object[]> rs = null;

		try {
			int totalrow = 0;
			Pager page = null;
			if (curpage == null || curpage.equals("")) {

				value = request.getParameter("value");
				type = request.getParameter("type");

				sql = "select bill.bill_id,"
						+ "bill.month_id,"
						+ "bill.family_id,"
						+ "bill.money,"
						+ "bill.familyno,"
						+ "bill.mastername,"
						+ "bill.paperid,"
						+ "bill.accouts "
						+ " from impl_t_bill bill , sys_t_organization organ where organ.organization_id =bill.orgno and bill.month_id ='"
						+ monthid + "'";

				if (type != null) {
					if (type.equals("mastername")) {
						sql += " and  bill.mastername like '%" + value + "%'";
					} else if (type.equals("paperid")) {
						sql += " and bill.paperid='" + value + "'";
					} else if (type.equals("famno")) {
						sql += " and bill.familyno='" + value + "'";
					}
				}
				sql = sql + " order by bill.familyno ";

				BigDecimal allrows = (BigDecimal) session.createSQLQuery(
						"select count(1) from ( " + sql + " )").uniqueResult();

				HashMap cols = new HashMap();
				cols.put(4, "家庭编号");
				cols.put(5, "户主姓名");
				cols.put(6, "证件号码");
				cols.put(7, "银行账号");
				cols.put(3, "总金额");

				hsession.setAttribute("cols", cols);
				hsession.setAttribute("sql", sql);

				if (null != allrows) {
					totalrow = allrows.intValue();
				}
				page = new Pager(totalrow, new Long(1).intValue(), "0");
				rs = session.createSQLQuery(
						"select * from (select mytab.*, rownum row_num from ("
								+ sql + ") mytab) where row_num between "
								+ page.getBeiginrow() + " and "
								+ page.getEndrow()).list();
				log.error("账单查询语句:" + sql);
			} else {
				sql = (String) hsession.getAttribute("sql");
				BigDecimal allrows = (BigDecimal) session.createSQLQuery(
						"select count(1) from ( " + sql + " )").uniqueResult();
				hsession.setAttribute("sql", sql);

				if (null != allrows) {
					totalrow = allrows.intValue();
				}
				page = new Pager(totalrow, new Long(curpage).intValue(), "0");
				rs = session.createSQLQuery(
						"select * from (select mytab.*, rownum row_num from ("
								+ sql + ") mytab) where row_num between "
								+ page.getBeiginrow() + " and "
								+ page.getEndrow()).list();
			}
			request.setAttribute("monthid", monthid);
			page.setUrl("billcreatefileview.do?monthid=" + monthid);
			String html = "";

			for (Object[] o : rs) {

				String accouts = (String) o[7];
				if (null == accouts || "".equals(accouts)
						|| "null".equals(accouts)) {
					accouts = " ";
				}
				String familyno = (String) o[4];
				if (null == familyno || "".equals(familyno)
						|| "null".equals(familyno)) {
					familyno = "";
				}
				String mastername = (String) o[5];
				if (null == mastername || "".equals(mastername)
						|| "null".equals(mastername)) {
					mastername = "";
				}
				String paperid = (String) o[6];
				if (null == paperid || "".equals(paperid)
						|| "null".equals(paperid)) {
					paperid = "";
				}
				BigDecimal money = (BigDecimal) o[3];
				if (null == money) {
					money = new BigDecimal(0);
				}

				html += "<tr><td><span style=\"cursor:hand\"><a target=\"_blank\" href=\"../info/card/newfamilyinfocard.do?entityId="
						+ o[2].toString()
						+ "\">"
						+ familyno
						+ "</a></span></td><td>"
						+ mastername
						+ "</td><td>"
						+ paperid
						+ "</td><td>"
						+ accouts
						+ "</td><td>"
						+ money
						+ "</td><td><span style=\"cursor:hand\"><a target=\"_blank\" href=\"querypolicybymonth.do?familyId="
						+ o[2].toString()
						+ "&imonthId="
						+ monthid
						+ "\">查看详细</a></span></td></tr>";

			}

			request.setAttribute("html", html);
			request.setAttribute("toolsmenu", page.getToolsMenu());
			request.setAttribute("monthid", monthid);
			// 银行格式
			SysTEmployee employee = (SysTEmployee) hsession
					.getAttribute("employee");
			ImplTInterfacedefineDAO definedao = new ImplTInterfacedefineDAO();
			List<Object[]> defines = definedao.findByOrganizationId(employee
					.getSysTOrganization().getOrganizationId());
			request.setAttribute("defines", defines);
			// 机构列表
			SysTOrganizationDAO organdao = new SysTOrganizationDAO();
			List<SysTOrganization> organlist = organdao
					.findByParentorgid(employee.getSysTOrganization()
							.getOrganizationId());
			request.setAttribute("organlist", organlist);

			// 变更户主停发文件
			sql = "select count(*) from impl_t_accchange ac, info_t_family fam "
					+ " where fam.family_id = ac.family_id "
					+ "  and fam.organization_id like '"
					+ employee.getSysTOrganization().getOrganizationId()
					+ "%' "
					+ " and ac.changetype = 'S' and EXISTS (SELECT 1 "
					+ " FROM impl_t_account acc "
					+ " WHERE acc.account_id = ac.account_id "
					+ " AND acc.accounts IS NOT NULL) order by fam.familyno";

			BigDecimal tf = (BigDecimal) session.createSQLQuery(sql)
					.uniqueResult();

			// 居民迁移新开折文件

			sql = " select count(*) from (" + "select b.familyno, "
					+ "  b. mastername," + "   b. paperid,"
					+ "   b.changetype," + "     b. oldinfo,"
					+ "    0 as money" + "  from (SELECT acc.familyno,"
					+ "     acc.mastername," + "     acc.paperid,"
					+ "     'N' AS changetype," + "      '' AS oldinfo"
					+ "   FROM impl_t_account acc, info_t_family fam"
					+ "   WHERE fam.family_id = acc.family_id"
					+ "     AND fam.organization_id like '"
					+ employee.getSysTOrganization().getOrganizationId()
					+ "%'"
					+ "    AND acc.accounts IS NULL"
					+ "    and exists (select 1"
					+ "        from impl_t_bill bill"
					+ "         where bill.month_id = '"
					+ monthid
					+ "'"
					+ "           and bill.orgno like '"
					+ employee.getSysTOrganization().getOrganizationId()
					+ "%'"
					+ "              and bill.family_id = acc.family_id)"
					+ "     UNION"
					+ "    SELECT ac.familyno,"
					+ "         ac.mastername,"
					+ "      ac.paperid,"
					+ "        ac.changetype,"
					+ "         ac.oldinfo"
					+ "     FROM impl_t_accchange ac, info_t_family fam"
					+ "    WHERE fam.family_id = ac.family_id"
					+ "       AND fam.organization_id LIKE '"
					+ employee.getSysTOrganization().getOrganizationId()
					+ "%'"
					+ "     AND ac.changetype = 'M' and ac.month_id='"+monthid+"'"
					+ "    AND EXISTS (SELECT 1"
					+ "        FROM impl_t_account acc"
					+ "         WHERE acc.account_id = ac.account_id"
					+ "             AND acc.accounts IS NOT NULL)"
					+ "   union"
					+ "  select t1.familyno,"
					+ "          t1.mastername,"
					+ "         t1.paperid,"
					+ "         t1.changetype,"
					+ "          '' as oldinfo"
					+ "     from impl_t_accchange t1, impl_t_accchange t2"
					+ "    where t1.family_id = t2.family_id"
					+ "      and t1.changetype = 'N'"
					+ "     and t2.changetype = 'S' and t1.month_id='"
					+ monthid
					+ "' and t2.month_id='"
					+ monthid
					+ "'"
					+ "     and exists (select *"
					+ "        from impl_t_bill bill"
					+ "     where bill.month_id = '"
					+ monthid
					+ "'"
					+ "       and bill.orgno like '"
					+ employee.getSysTOrganization().getOrganizationId()
					+ "%'"
					+ "       and bill.family_id = t1.family_id)) b"
					+ "  order by b.familyno " + ")";
			BigDecimal xkz = (BigDecimal) session.createSQLQuery(sql)
					.uniqueResult();

			// 续存文件
			sql = "select count(*) as xc , sum(bill.money) as zm from  impl_t_bill   bill where bill.month_id ='"
					+ monthid
					+ "' and bill.orgno like '"
					+ employee.getSysTOrganization().getOrganizationId()
					+ "%' order by bill.familyno";
			Object[] xc = (Object[]) session.createSQLQuery(sql).uniqueResult();
			request
					.setAttribute("title", "变更户主停发户数：" + tf.intValue()
							+ "  居民迁移新开折户数：" + xkz.intValue() + "  续存户数："
							+ xc[0].toString() + "  总金额：" + xc[1].toString()
							+ "元     ");
		} catch (RuntimeException e) {
			e.printStackTrace();
		} finally {
			SessionFactory.closeSession();

		}

		return mapping.findForward("billcreatefile");
	}
}