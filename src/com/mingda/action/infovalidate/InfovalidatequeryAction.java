/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.infovalidate;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Session;

import com.mingda.common.Pager;
import com.mingda.common.SessionFactory;
import com.mingda.common.log4j.Log4jApp;
import com.mingda.dao.SysTPrivilegeDAO;
import com.mingda.entity.InfoMember;
import com.mingda.entity.SysTEmployee;

/**
 * MyEclipse Struts Creation date: 09-19-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 * @struts.action-forward name="infovalidatequery"
 *                        path="/page/infovalidate/infovalidatequery.jsp"
 */
public class InfovalidatequeryAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession hsession = request.getSession();

		SysTEmployee employee = (SysTEmployee) hsession
				.getAttribute("employee");
		String organno = employee.getSysTOrganization().getOrganizationId();
		String empid = employee.getEmployeeId().toString();
		Session session = SessionFactory.getSession();
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String curpage = request.getParameter("cur_page");
		String sql = "";
		try {
			conn = session.connection();
			int totalrow = 0;
			Pager page = null;
			if (curpage == null || curpage.equals("")) {
				String valtype = request.getParameter("valtype");
				String term = request.getParameter("term");
				String value = request.getParameter("value");
				sql = "select term.name, t.* ,f.familyno ,f.mastername ,o.fullname from  biz_t_validateterm term ,biz_t_validatelog t, info_t_family f ,sys_t_organization o"
						+ " where f.family_id=t.family_id  and term.validateterm_id =t.validateterm_id and o.organization_id =f.organization_id and f.organization_id like '"
						+ organno + "%' ";
				if (null == valtype || "".equals(valtype)) {
				} else {
					sql = sql + " and  t.validateterm_id ='" + valtype + "'";
				}
				if (null == term || "".equals(term)) {
				} else if ("all".equals(term)) {

				} else if ("mastername".equals(term)) {
					sql = sql + " and f.mastername like '%" + value + "%' ";
				} else if ("familyno".equals(term)) {
					sql = sql + "  and  f.familyno  ='" + value + "' ";
				}
				sql = sql + " order by f.familyno";
				pstmt = conn.prepareStatement("select count(1) from ( " + sql
						+ " )");
				Log4jApp.logger("验证信息查询:" + sql);
				hsession.setAttribute("sql", sql);
				rs = pstmt.executeQuery();
				if (rs.next()) {
					totalrow = rs.getInt(1);
				}
				page = new Pager(totalrow, new Long(1).intValue(), "0");
				pstmt = conn
						.prepareStatement("select * from (select mytab.*, rownum row_num from ("
								+ sql
								+ ") mytab) where row_num between "
								+ page.getBeiginrow()
								+ " and "
								+ page.getEndrow());
				rs = pstmt.executeQuery();
			} else {
				sql = (String) hsession.getAttribute("sql");
				pstmt = conn.prepareStatement("select count(1) from ( " + sql
						+ " )");
				rs = pstmt.executeQuery();
				if (rs.next()) {
					totalrow = rs.getInt(1);
				}
				page = new Pager(totalrow, new Long(curpage).intValue(), "0");
				pstmt = conn
						.prepareStatement("select * from (select mytab.*, rownum row_num from ("
								+ sql
								+ ") mytab) where row_num between "
								+ page.getBeiginrow()
								+ " and "
								+ page.getEndrow());
				rs = pstmt.executeQuery();
			}
			page.setUrl("infovalidatequery.do");
			ArrayList<InfoMember> arr = new ArrayList<InfoMember>();
			while (rs.next()) {
				InfoMember mem = new InfoMember();
				mem.setFamilyId(rs.getLong("family_id"));
				mem.setMembername(rs.getString("mastername"));
				mem.setBirthday(rs.getString("content"));
				mem.setLabor(rs.getString("fullname"));
				mem.setInchurl(rs.getString("familyno"));
				mem.setPaperid(rs.getString("name"));
				arr.add(mem);
			}
			if (arr.size() > 0) {
				SysTPrivilegeDAO prividao = new SysTPrivilegeDAO();
				request
						.setAttribute("flag", prividao
								.isPrivilegeByEmpid(empid));
				request.setAttribute("arr", arr);
				request.setAttribute("toolsmenu", page.getToolsMenu());
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (pstmt != null) {
					pstmt.close();
				}
				if (conn != null) {
					conn.close();
				}
				SessionFactory.closeSession();
			} catch (SQLException e) {
				e.printStackTrace();
			}

		}

		return mapping.findForward("infovalidatequery");
	}
}