/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action;

import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Session;
import org.hibernate.Transaction;
import com.mingda.common.SessionFactory;
import com.mingda.dao.SysTEmployeeDAO;
import com.mingda.dao.SysTOperatelogDAO;
import com.mingda.dao.SysTOrganizationDAO;
import com.mingda.entity.SysTEmployee;
import com.mingda.entity.SysTOperatelog;
import com.mingda.form.LoginForm;

/**
 * MyEclipse Struts Creation date: 04-14-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/login" name="loginForm" input="/login.jsp"
 *                scope="request" validate="true"
 */
public class LoginAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	static Logger log = Logger.getLogger(LoginAction.class);
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LoginForm loginForm = (LoginForm) form;
		HttpSession httpSession = request.getSession();
		SysTEmployee sysTEmployee = null;
		List organizations = null; /* 直属下级机构列表 */
		Session session = SessionFactory.getSession();
		Transaction tx = session.beginTransaction();
		try {
			SysTEmployeeDAO sysTEmployeeDAO = new SysTEmployeeDAO();
			//log.debug("登录名称"+loginForm.getUser());
			log.debug("登录名称"+loginForm.getUser());
			Iterator iterator = sysTEmployeeDAO.findByAccount(
					loginForm.getUser()).iterator();
			if (iterator.hasNext()) {
				sysTEmployee = (SysTEmployee) iterator.next();
				if (sysTEmployee.getPassword().equals(loginForm.getPass())) {
					SysTOrganizationDAO sysTOrganizationDAO = new SysTOrganizationDAO();
					organizations = sysTOrganizationDAO
							.findByParentorgid(sysTEmployee
									.getSysTOrganization().getOrganizationId());
					organizations.add(0, sysTEmployee.getSysTOrganization());
					/* 操作日志 */
					SysTOperatelogDAO sysTOperatelogDAO = new SysTOperatelogDAO();
					SysTOperatelog sysTOperatelog = new SysTOperatelog();
					sysTOperatelog.setContent("用户登陆");
					sysTOperatelog.setIpaddress(request.getRemoteAddr());
					sysTOperatelog.setServerip(request.getLocalAddr());
					sysTOperatelog.setLogsort("1");
					sysTOperatelog.setOperatetime(new Date());
					sysTOperatelog.setSysTEmployee(sysTEmployee);
					sysTOperatelogDAO.save(sysTOperatelog);
					log.debug("机构数量"+organizations.size());
				} else {
					sysTEmployee = null;
					organizations = null;
				}
			} else {
				sysTEmployee = null;
				organizations = null;
			}
			tx.commit();
		} catch (RuntimeException e) {
			tx.rollback();
			e.printStackTrace();
		} finally {
			SessionFactory.closeSession();
		}
		/* 设置用户信息，判断页面转向 */
		if (sysTEmployee == null) {
			httpSession.removeAttribute("employee");
			httpSession.removeAttribute("orglist");
			request.setAttribute("err", "用户名或者密码不正确");
			//ActionForward f =new ActionForward("http://10.1.3.14/db/login2.jsp");
			return mapping.findForward("login");
		} else {
			httpSession.setAttribute("employee", sysTEmployee);/* 把用户信息放入session中，属性名称：emploee */
			httpSession.setAttribute("orglist", organizations);/* 把用直属及下属机构放入session中，属性名称：orglist */
			return mapping.findForward("index");
		}
	}
}