/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.system.syslog;

import java.util.Iterator;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

import com.mingda.common.log4j.Log4jApp;
import com.mingda.common.node.TreeHandle;
import com.mingda.common.node.TreeHandleImpl;
import com.mingda.common.page.PageView;
import com.mingda.dao.SysTEmployeeDAO;
import com.mingda.entity.SysTEmployee;

/**
 * MyEclipse Struts Creation date: 08-14-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 * @struts.action-forward name="syslogview"
 *                        path="/page/system/syslog/syslogview.jsp"
 */
public class SyslogviewAction extends Action {
	static Logger log = Logger.getLogger(SyslogviewAction.class);
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String nodeId = request.getParameter("nodeId");
		String nodeName = request.getParameter("nodeName");
		Document tree = (Document) this.servlet.getServletContext()
				.getAttribute("tree");
		TreeHandle th = new TreeHandleImpl(tree);

		Document dictionary = (Document) this.servlet.getServletContext()
				.getAttribute("dictionary");
		PageView pv = new PageView();

		if (nodeName.equals("FAMILYINCOME") || nodeName.equals("FAMILYCLASS")
				|| nodeName.equals("MEMBERCLASS") || nodeName.equals("PAYOUT")
				|| nodeName.equals("MEMBERINCOME")) {
			Document temp = (Document) th.selectEntities(nodeName, new Long(
					nodeId));
			log.debug(temp.asXML());
			nodeId = temp.selectSingleNode(
					"//" + nodeName + "/property[@isprimary='true']").getText();
		}
		String cap = "";
		Document logdoc = th.getEntityLogs(nodeName, new Long(nodeId));
		Log4jApp.logger(logdoc.asXML());
		Document view = DocumentHelper.createDocument();
		Element root = view.addElement("table").addAttribute("width", "95%")
				.addAttribute("class", "table7");
		Element tr = root.addElement("tr");
		tr.addElement("th").setText("操作时间");
		tr.addElement("th").setText("操作人");
		tr.addElement("th").setText("岗位");
		tr.addElement("th").setText("机构");
		Iterator it = logdoc.getRootElement().elementIterator();
		SysTEmployeeDAO empdao = new SysTEmployeeDAO();
		int j = 0;
		while (it.hasNext()) {
			Element element = (Element) it.next();

			SysTEmployee employee = empdao.findById(new Long(element
					.attributeValue("operator")));
			String recordtime = element.attributeValue("recordtime");
			cap = element.attributeValue("title");
			Element tr2 = root.addElement("tr").addAttribute("style",
					"cursor:hand").addAttribute("id", "p" + j).addAttribute(
					"onclick", "changdis(" + j + ")");
			tr2.addElement("td").setText(recordtime);
			tr2.addElement("td").setText(employee.getSysTEmpext().getName());
			tr2.addElement("td").setText(employee.getSysTPost().getName());
			tr2.addElement("td").setText(
					employee.getSysTOrganization().getOrgname());
			Element td = root.addElement("tr").addAttribute("style",
					"display:none").addAttribute("id", "c" + j)
					.addElement("td").addAttribute("colspan", "4");
			Element table1 = td.addAttribute("style", "text-align:left")
					.addElement("table").addAttribute("width", "100%")
					.addAttribute("class", "table6");
			Iterator pit = element.elementIterator();
			int i = 0;
			while (pit.hasNext()) {
				Element property = (Element) pit.next();
				String isvisible = "";
				String alter = "";
				String oldvalue = "";
				String title = "";
				String dicsort = "";
				String status = "";
				String value = property.getText();
				if (property.attribute("isvisible") != null) {
					isvisible = property.attributeValue("isvisible");
				}
				if (property.attribute("alter") != null) {
					alter = property.attributeValue("alter");
				}
				if (property.attribute("oldvalue") != null) {
					oldvalue = property.attributeValue("oldvalue");
				}
				if (property.attribute("title") != null) {
					title = property.attributeValue("title");
				}
				if (property.attribute("dicsort") != null) {
					dicsort = property.attributeValue("dicsort");
				}
				if (!dicsort.equals("")) {
					oldvalue = pv.getDictionartHandle().getDictsortToValue(
							dictionary, oldvalue);
					value = pv.getDictionartHandle().getDictsortToValue(
							dictionary, value);
				}
				if (property.attribute("status") != null) {
					status = property.attributeValue("status");
				}
				if (!isvisible.equals("") && !status.equals("")
						&& !alter.equals("")) {
					Element a = table1.addElement("tr").addAttribute("style",
							"align-text:left");
					a.addElement("td").setText(new Long(++i).toString() + ". ");
					a.addElement("td").setText(title);
					a.addElement("td").addAttribute("style", "color:#ff0000")
							.setText("修改前：" + oldvalue);
					a.addElement("td").setText("修改后: " + value);
				}
			}
			j++;
		}
		request.setAttribute("cap", cap);
		request.setAttribute("table", root.asXML());
		return mapping.findForward("syslogview");
	}
}