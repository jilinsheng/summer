/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.info.neweditor;

import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.Globals;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.mingda.common.dictionary.DictionaryHandle;
import com.mingda.common.ibatis.SqlMapper;
import com.mingda.common.ibatis.dao.InfoTFamilyDAO;
import com.mingda.common.ibatis.dao.InfoTMemberDAO;
import com.mingda.common.ibatis.data.InfoTFamily;
import com.mingda.common.ibatis.data.InfoTMember;
import com.mingda.entity.SysTEmployee;


/**
 * MyEclipse Struts Creation date: 04-08-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 * @struts.action-forward name="familybase"
 *                        path="/page/info/neweditor/familybase.jsp"
 */
public class FamilybaseinitAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	static Logger log = Logger.getLogger(FamilybaseinitAction.class);

	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
System.out.println(111);
		String familyId = request.getParameter("familyId");
		System.out.println(112);
		// log.debug(familyId);
		// 放入令牌
		this.saveToken(request);
		System.out.println(113);
		Globals s;
		System.out.println(114);
		HttpSession httpsession = request.getSession();
		SysTEmployee employee = (SysTEmployee) httpsession
				.getAttribute("employee");
		System.out.println(115);
		Document dictionary = (Document) this.servlet.getServletContext()
				.getAttribute("dictionary");
		System.out.println(116);
		DictionaryHandle dh = new DictionaryHandle();
		// 读取家庭信息
		// family
		System.out.println(117);
		Long organizationId = new Long(employee.getSysTOrganization()
				.getOrganizationId());
		String familyno = null;
		Long population = new Long(0);
		String mastername = null;
		Long ensurecount = new Long(0);
		Long masterid = null;
		Long assetworth = new Long(0);
		Long consultincome = new Long(0);
		Long masterpapertype = null;
		String masterpaperid = null;
		// String rpraddress = null;
		String famaddress = employee.getSysTOrganization().getFullname();
		String linkmode = null;
		String status = null;
		Double avgincome = null;
		String malcondition = "";
		Long onlychild = null;
		Double allpayout = new Double(0);
		// member
		String memberId = null;
		Long relmaster = new Long("112");
		String membername = null;
		Long papertype = new Long("390");
		String paperid = null;
		Date birthday = null;
		Long sex = null;
		Long nation = new Long("500");
		Long ismarriage = null;
		Long political = new Long("238");
		Long rprkind = new Long("367");
		Long rprtype = new Long("261");
		String rpraddress = employee.getSysTOrganization().getFullname();
		log.debug(6);
		Long degreesort = new Long("790");
		Long policy = null;
		Long ftap = null;
		Long sicken = null;
		Long deformity = null;
		Long oldandinfirm = null;
		Long workability = null;
		String picpath = "";
		Long student = new Long(101);
		log.debug(7);
		SqlMapClient client = SqlMapper.getSqlMapper();
		try {
			client.startTransaction();

			InfoTFamilyDAO familydao = new InfoTFamilyDAO(client);
			InfoTMemberDAO memberdao = new InfoTMemberDAO(client);
			log.debug(8);
			InfoTFamily family = new InfoTFamily();
			InfoTMember member = new InfoTMember();

			if (null != familyId && !"".equals("familyId")) {

				family = familydao.selectFamilyById(familyId);
				
				log.debug(9);
				familyId = family.getFamilyId().toString();
				organizationId = family.getOrganizationId();
				familyno = family.getFamilyno();
				population = family.getPopulation();
				if (null == population) {
					population = new Long(0);
				}
				mastername = family.getMastername();
				ensurecount = family.getEnsurecount();
				if (null == ensurecount) {
					ensurecount = new Long(0);
				}
				masterid = family.getMasterid();
				assetworth = family.getAssetworth();
				if (null == assetworth) {
					assetworth = new Long(0);
				}
				consultincome = family.getConsultincome();
				if (null == consultincome) {
					consultincome = new Long(0);
				}
				masterpapertype = family.getMasterpapertype();
				masterpaperid = family.getMasterpaperid();
				// rpraddress = family.getRpraddress();
				famaddress = family.getFamaddress();
				if (null != famaddress && !"".equals(famaddress)) {

				} else {
					famaddress = employee.getSysTOrganization().getFullname();
				}
				linkmode = family.getLinkmode();
				status = family.getStatus();
				avgincome = family.getAvgincome();
				if (null == avgincome) {
					avgincome = new Double(0);
				}
				malcondition = familydao.getSalReason(familyId);
				log.debug(10);
				if(null==malcondition){
					malcondition="";
				}
				onlychild = family.getOnlychild();
				allpayout = family.getAllpayout();
				if (null == allpayout) {
					allpayout = new Double(0);
				}
				log.debug(11);
				member = memberdao.selectMaster(familyId);
				log.debug(12);
				memberId = member.getMemberId().toString();
				relmaster = member.getRelmaster();
				membername = member.getMembername();
				papertype = member.getPapertype();
				paperid = member.getPaperid();
				birthday = member.getBirthday();
				sex = member.getSex();
				nation = member.getNation();
				ismarriage = member.getIsmarriage();
				political = member.getPolitical();
				rprkind = member.getRprkind();
				rprtype = member.getRprtype();
				rpraddress = member.getRpraddress();
				if (null != rpraddress && !"".equals(rpraddress)) {

				} else {
					rpraddress = employee.getSysTOrganization().getFullname();
				}
				degreesort = member.getDegreesort();
				policy = member.getPolicy();
				ftap = member.getFtap();
				sicken = member.getSicken();
				deformity = member.getDeformity();
				oldandinfirm = member.getOldandinfirm();
				workability = member.getWorkability();
				picpath = member.getPicpath();
				student = member.getStudent();
				log.debug(13);
				log.debug(familyId + "    当前编辑的家庭       "
						+ family.getFamilyno() + "    "
						+ member.getMembername());
				log.debug(14);
			}

			Document pagedoc = DocumentHelper.createDocument();
			Element dict = null;

			Element root = pagedoc.addElement("table");
			root.addAttribute("width", "99%").addAttribute("class", "table8")
					.addAttribute("cellpadding", "0").addAttribute(
							"cellspacing", "0");

			Element tr1 = root.addElement("tr");
			tr1.addElement("th").addAttribute("width", "100").setText("家庭编号");
			tr1.addElement("td").addAttribute("width", "160").setText(familyno);
			tr1.addElement("th").addAttribute("width", "100").setText("户主姓名");
			tr1.addElement("td").addAttribute("width", "160").addElement(
					"input").addAttribute("name", "membername").addAttribute(
					"type", "text").addAttribute("value", membername);

			

			Element inchelement = tr1.addElement("td").addAttribute("colspan",
					"2").addAttribute("rowspan", "11").addAttribute("valign",
					"top").addAttribute("align", "left");

			// 照片路径
			log.debug(1);
			String basePath = request.getScheme() + "://"
					+ request.getServerName() + ":" + request.getServerPort()
					+ "/usr/upload/inch" + picpath;
			if (null == picpath || "".equals(picpath)) {
				basePath = "../../images/nopic.gif";
			}
			log.debug(15);
			inchelement.addElement("br");
			inchelement.addElement("div").setText("户主照片");
			inchelement.addElement("div").addAttribute("id", "inchdiv")
					.addElement("img").addAttribute("id", "inch").addAttribute(
							"src", basePath).addAttribute("width", "120px")
					.addAttribute("height", "150px");
			log.debug(16);
			Element tr2 = root.addElement("tr");
			tr2.addElement("th").addAttribute("width", "100").setText("证件类型");
			dict = dh.getDictsortToXML(dictionary, "270", papertype);
			dict.addAttribute("name", "papertype");
			tr2.addElement("td").addAttribute("width", "160").add(
					(Element) dict.clone());
			tr2.addElement("th").addAttribute("width", "100").setText("证件号码");
			tr2.addElement("td").addAttribute("width", "160").addElement(
					"input").addAttribute("name", "paperid").addAttribute(
					"type", "text").addAttribute("value", paperid)
					.addAttribute("onchange", "editbypaperid()");

			Element tr3 = root.addElement("tr");
			tr3.addElement("th").addAttribute("width", "100").setText("出生日期");
			log.debug(17);
			String birthdaystr = "";
			if (null == birthday) {

			} else {
				SimpleDateFormat simpleDateFormat = new SimpleDateFormat(
						"yyyy-MM-dd");
				birthdaystr = simpleDateFormat.format(birthday);
			}

			tr3.addElement("td").addAttribute("width", "160").addElement(
					"input").addAttribute("name", "birthday").addAttribute(
					"readonly", "true").addAttribute("type", "text")
					.addAttribute("onfocus", "setday(this)").addAttribute(
							"value", birthdaystr);
			tr3.addElement("th").addAttribute("width", "100").setText("性别");
			dict = dh.getDictsortToXML(dictionary, "1", sex);
			dict.addAttribute("name", "sex");
			tr3.addElement("td").addAttribute("width", "160").add(
					(Element) dict.clone());

			Element tr14 = root.addElement("tr");
			/*tr14.addElement("th").addAttribute("width", "100")
					.setText("家庭贫困类型");
			dict = dh.getDictsortToXML(dictionary, "100", malcondition);
			dict.addAttribute("name", "malcondition");
			tr14.addElement("td").addAttribute("width", "160").add(
					(Element) dict.clone());*/
			tr14.addElement("th").addAttribute("width", "100").setText("是否独生子女户");
			dict = dh.getDictsortToXML(dictionary, "100", onlychild);
			dict.addAttribute("name", "onlychild");
			tr14.addElement("td").addAttribute("width", "160").add(
					(Element) dict.clone());
			tr14.addElement("td").setText("");
			tr14.addElement("td").setText("");
			
			Element tr7 = root.addElement("tr");
			tr7.addElement("th").addAttribute("width", "100").setText("家庭贫困类型");
			tr7.addElement("td").addAttribute("colspan", "3").addAttribute(
					"width", "400").setText(malcondition);
			
			Element tr22 = root.addElement("tr");
			tr22.addElement("th").addAttribute("width", "100")
					.setText("家庭人口总数");
			tr22.addElement("td").addAttribute("width", "160").setText(
					population.toString());
			tr22.addElement("th").addAttribute("width", "100")
					.setText("保障人口总数");
			tr22.addElement("td").addAttribute("width", "160").setText(
					ensurecount.toString());
			//tr22.addElement("td").setText("");
			//tr22.addElement("td").setText("");

			Element tr23 = root.addElement("tr");
			tr23.addElement("th").addAttribute("width", "100")
					.setText("总收入(元)");
			tr23.addElement("td").addAttribute("width", "160").setText(
					consultincome.toString());
			tr23.addElement("th").addAttribute("width", "100").setText(
					"人均收入(元)");
			tr23.addElement("td").addAttribute("width", "160").setText(
					avgincome.toString());
			//tr23.addElement("td").setText("");
			//tr23.addElement("td").setText("");

			Element tr24 = root.addElement("tr");
			tr24.addElement("th").addAttribute("width", "100").setText(
					"资产估值(元)");
			tr24.addElement("td").addAttribute("width", "160").setText(
					assetworth.toString());
			tr24.addElement("th").addAttribute("width", "100")
					.setText("总支出(元)");
			tr24.addElement("td").addAttribute("width", "160").setText(
					allpayout.toString());
			//tr24.addElement("td").setText("");
			//tr24.addElement("td").setText("");
			
			Element tr8 = root.addElement("tr");
			tr8.addElement("th").addAttribute("width", "100").setText("户口所在地");
			tr8.addElement("td").addAttribute("colspan", "3").addAttribute(
					"width", "400").addElement("input").addAttribute("name",
					"rpraddress").addAttribute("type", "text").addAttribute(
					"value", rpraddress);

			Element tr9 = root.addElement("tr");
			tr9.addElement("th").addAttribute("width", "100").setText("家庭住址");
			tr9.addElement("td").addAttribute("colspan", "3").addAttribute(
					"width", "400").addElement("input").addAttribute("name",
					"famaddress").addAttribute("type", "text").addAttribute(
					"value", famaddress);

			Element tr10 = root.addElement("tr");
			tr10.addElement("th").addAttribute("width", "100").setText("联系电话");
			tr10.addElement("td").addAttribute("colspan", "3").addAttribute(
					"width", "400").addElement("input").addAttribute("name",
					"linkmode").addAttribute("type", "text").addAttribute(
					"value", linkmode);
			
		

			request.setAttribute("familyId", familyId);
			request.setAttribute("memberId", memberId);
			request.setAttribute("picpath", picpath);

			request.setAttribute("pagehtml", root.asXML());

			client.commitTransaction();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				client.endTransaction();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return mapping.findForward("familybase");
	}
}