/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.info.neweditor;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.fileupload.DiskFileUpload;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.mingda.common.ibatis.SqlMapper;
import com.mingda.common.ibatis.dao.InfoTFamilyDAO;
import com.mingda.common.ibatis.dao.InfoTMemberDAO;
import com.mingda.common.ibatis.data.InfoTFamily;
import com.mingda.common.ibatis.data.InfoTMember;
import com.mingda.entity.SysTEmployee;

/**
 * MyEclipse Struts Creation date: 04-08-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class FamilybasesaveAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String str = "";
		SqlMapClient client = SqlMapper.getSqlMapper();
		try {
			client.startTransaction();
			// 令牌
			String token = "";
			// 照片
			FileItem inchfileitem = null;
			// 表单项
			String familyId = "";
			String memberId = "";
			String membername = "";
			String papertype = "";
			String paperid = "";
			String birthday = "";
			String sex = "";
			/*
			 * String rprtype = ""; String rprkind = ""; String ismarriage = "";
			 * String political = "";
			 */
			String onlychild = "";
			/*
			 * String nation = ""; String ftap = ""; String degreesort = "";
			 * String sicken = ""; String deformity = ""; String workability =
			 * ""; String oldandinfirm = "";
			 * 
			 * String policy = "";
			 */
			String rpraddress = "";
			String famaddress = "";
			String linkmode = "";
			String malcondition = "";
			/*
			 * String picpath = ""; String student="";
			 */

			/*InputStream sin = new BufferedInputStream(request.getInputStream());
			ByteArrayOutputStream   sout   =   new   ByteArrayOutputStream();   
			  int   b=0;   
			  while((b=sin.read())!=-1)   
			  {   
			  sout.write(b); 
			  }   
			  byte[]   temp   =   sout.toByteArray();   
			  String   s_ok   =   new   String(temp,"GB2312");   
			  System.out.print(s_ok);   
			  sout.close();*/
			// 初始化common upload 类
			DiskFileUpload ff = new DiskFileUpload();
			ff.setSizeMax(41943040);
			ff.setSizeThreshold(4096);
			ff.setHeaderEncoding("gb18030");
			// 装载request对象
			List<FileItem> list = ff.parseRequest(request);

			for (FileItem item : list) {
				if ("org.apache.struts.taglib.html.TOKEN".equals(item
						.getFieldName())) {
					token = item.getString();
				} else if (item.isFormField()) {

					if ("familyId".equals(item.getFieldName())) {
						familyId = item.getString("gb18030");
					}
					if ("memberId".equals(item.getFieldName())) {
						memberId = item.getString("gb18030");
					}
					if ("membername".equals(item.getFieldName())) {
						membername = item.getString("gb18030");
					}
					if ("papertype".equals(item.getFieldName())) {
						papertype = item.getString("gb18030");
					}
					if ("paperid".equals(item.getFieldName())) {
						paperid = item.getString("gb18030");
					}
					if ("birthday".equals(item.getFieldName())) {
						birthday = item.getString("gb18030");
					}
					if ("sex".equals(item.getFieldName())) {
						sex = item.getString("gb18030");
					}
					/*
					 * if ("rprtype".equals(item.getFieldName())) { rprtype =
					 * item.getString(); } if
					 * ("rprkind".equals(item.getFieldName())) { rprkind =
					 * item.getString(); } if
					 * ("ismarriage".equals(item.getFieldName())) { ismarriage =
					 * item.getString(); } if
					 * ("political".equals(item.getFieldName())) { political =
					 * item.getString(); }
					 */
					if ("onlychild".equals(item.getFieldName())) {
						onlychild = item.getString("GB18030");
					}
					/*
					 * if ("nation".equals(item.getFieldName())) { nation =
					 * item.getString(); } if
					 * ("ftap".equals(item.getFieldName())) { ftap =
					 * item.getString(); } if
					 * ("degreesort".equals(item.getFieldName())) { degreesort =
					 * item.getString(); } if
					 * ("sicken".equals(item.getFieldName())) { sicken =
					 * item.getString(); } if
					 * ("deformity".equals(item.getFieldName())) { deformity =
					 * item.getString(); } if
					 * ("workability".equals(item.getFieldName())) { workability
					 * = item.getString(); } if
					 * ("oldandinfirm".equals(item.getFieldName())) {
					 * oldandinfirm = item.getString(); } if
					 * ("policy".equals(item.getFieldName())) { policy =
					 * item.getString(); }
					 */
					if ("malcondition".equals(item.getFieldName())) {
						malcondition = item.getString("GB18030");
					}

					if ("rpraddress".equals(item.getFieldName())) {
						rpraddress = item.getString("GB18030");
					}
					if ("famaddress".equals(item.getFieldName())) {
						famaddress = item.getString("GB18030");
					}
					if ("linkmode".equals(item.getFieldName())) {
						linkmode = item.getString("GB18030");
					}
					/*
					 * if ("picpath".equals(item.getFieldName())) { picpath =
					 * item.getString(); } if
					 * ("student".equals(item.getFieldName())) { student =
					 * item.getString(); }
					 */
					// 获取表单字段
				} else {
					// 取出上传照片
					inchfileitem = item;
				}
			}
			// 令牌判断
			if (request.getSession().getAttribute(
					"org.apache.struts.action.TOKEN") == null
					|| !token.equals(request.getSession().getAttribute(
							"org.apache.struts.action.TOKEN").toString())) {
				// 重复提交转到提示页面
				return mapping.findForward("error");
			} else {

				InfoTFamily family = new InfoTFamily();
				InfoTMember member = new InfoTMember();
				List<InfoTMember> mlist = null;

				InfoTFamilyDAO familydao = new InfoTFamilyDAO(client);
				InfoTMemberDAO memberdao = new InfoTMemberDAO(client);

				boolean isCreate = true;

				if (null != familyId && !"".equals(familyId)) {
					family = familydao.selectFamilyById(familyId);
					member = memberdao.selectMaster(familyId);
					mlist = memberdao.getMembersByFamilyId(familyId);
					isCreate = false;
				}
				HttpSession session = request.getSession();
				SysTEmployee employee = (SysTEmployee) session
						.getAttribute("employee");
				family.setOrganizationId(new Long(employee
						.getSysTOrganization().getOrganizationId()));
				family.setFamaddress(famaddress);
				family.setOnlychild(new Long(onlychild));
				family.setLinkmode(linkmode);
				family.setStatus("1");

				if (null != mlist) {
					int j = 0;
					int i = 0;
					for (InfoTMember infoTMember : mlist) {
						if (null!=infoTMember.getRprtype()&&infoTMember.getRprtype().intValue() == 261) {
							j++;
						}

						i++;
					}
					family.setPopulation(new Long(i));
					family.setEnsurecount(new Long(j));
				} else {
					family.setPopulation(new Long(1));
					family.setEnsurecount(new Long(1));
				}

				family.setMalcondition(malcondition);
				Date date = null;
				if (null == birthday) {

				} else {
					SimpleDateFormat simpleDateFormat = new SimpleDateFormat(
							"yyyy-MM-dd");

					date = simpleDateFormat.parse(birthday);
				}

				member.setBirthday(date);
				/*
				 * member.setDeformity(new Long(deformity));
				 * member.setDegreesort(new Long(degreesort));
				 * member.setFtap(new Long(ftap)); member.setIsmarriage(new
				 * Long(ismarriage));
				 */
				member.setMembername(membername);
				/*
				 * member.setNation(new Long(nation));
				 * member.setOldandinfirm(new Long(oldandinfirm));
				 */
				member.setPaperid(paperid);
				member.setPapertype(new Long(papertype));
				/*
				 * member.setPicpath(picpath); member.setPolicy(new
				 * Long(policy)); member.setPolitical(new Long(political));
				 */
				member.setRelmaster(new Long("112"));
				member.setRpraddress(rpraddress);
				/*
				 * member.setRprkind(new Long(rprkind)); member.setRprtype(new
				 * Long(rprtype));
				 */
				member.setSex(new Long(sex));
				/*
				 * member.setSicken(new Long(sicken)); member.setWorkability(new
				 * Long(workability)); member.setStudent(new Long(student));
				 */

				// 业务逻辑
				// 保存家庭
				if (isCreate) {
					familyId = familydao.insertFamily(family).toString();
					memberId = memberdao.insertmember(member).toString();
				} else {
					familydao.updateFamily(family);
					memberdao.updateMember(member);
				}
				familydao.updateFamilySalType(member.getFamilyId());

				// 保存家庭

				// 保存成员

				// 保存成员
				// 上传照片
				/*
				 * if (null != memberId && null != inchfileitem.getName() &&
				 * !"".equals(inchfileitem.getName())) {
				 * 
				 * // 判断系统路径 FileUpload fu = new FileUpload(); String inchpath =
				 * fu.isFileExists();
				 * 
				 * if (null != member.getPicpath() &&
				 * !"".equals(member.getPicpath())) { File delfile = new
				 * File(inchpath + member.getPicpath().substring(1));
				 * delfile.delete(); }
				 * 
				 * // 文件夹路径 inchpath = inchpath + "inch/" + memberId + "/"; //
				 * 照片名称 String inchpathname = java.util.UUID.randomUUID()
				 * .toString() + inchfileitem.getName().substring(
				 * inchfileitem.getName().lastIndexOf(".")); // 建立文件夹 File
				 * inchfile = new File(inchpath); if (!inchfile.exists()) {
				 * inchfile.mkdirs(); } // 存储照片 inchfile = new File(inchpath +
				 * inchpathname); inchfileitem.write(inchfile);
				 * member.setMemberId(new Integer(memberId));
				 * member.setPicpath("/" + memberId + "/" + inchpathname);
				 * memberdao.updateMemberPicpath(member); }
				 */
				// 存储照片
				str = "家庭编号：" + family.getFamilyno() + "  保存成功";

			}
			client.commitTransaction();
		} catch (FileUploadException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				client.endTransaction();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		this.resetToken(request);

		try {
			PrintWriter out = response.getWriter();
			out.println("<br><p style=\"font-size:12px\">");
			out.println(str);
			out.println("</p>");
			out.flush();
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
}