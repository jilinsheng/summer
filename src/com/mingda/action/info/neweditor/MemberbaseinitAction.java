/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.info.neweditor;

import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.Globals;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.Node;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.mingda.common.dictionary.DictionaryHandle;
import com.mingda.common.ibatis.SqlMapper;
import com.mingda.common.ibatis.dao.InfoTMemberDAO;
import com.mingda.common.ibatis.data.InfoTMember;
import com.mingda.entity.SysTEmployee;

/**
 * MyEclipse Struts Creation date: 04-09-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 * @struts.action-forward name="memberbase"
 *                        path="/page/info/neweditor/memberbase.jsp"
 */
public class MemberbaseinitAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	static Logger log = Logger.getLogger(MemberbaseinitAction.class);

	@SuppressWarnings("static-access")
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String memberId = request.getParameter("memberId");
		String familyId = request.getParameter("familyId");
		String type = request.getParameter("type");
		HttpSession httpsession = request.getSession();
		SysTEmployee employee = (SysTEmployee) httpsession
				.getAttribute("employee");
		// 放入令牌
		this.saveToken(request);
		Globals s;
		Document dictionary = (Document) this.servlet.getServletContext()
				.getAttribute("dictionary");
		DictionaryHandle dh = new DictionaryHandle();

		// 读取家庭信息
		List<InfoTMember> memberlist = null;
		// member
		Long relmaster = new Long(0);
		String membername = null;
		Long papertype = new Long("390");
		String paperid = null;
		Date birthday = null;
		Long sex = null;
		Long nation = new Long("500");
		Long ismarriage = null;
		Long political = new Long("238");
		Long rprkind = new Long("367");
		Long rprtype = new Long("261");
		String rpraddress = employee.getSysTOrganization().getFullname();
		Long degreesort = new Long("790");
		Long policy = null;
		Long ftap = null;
		Long sicken = null;
		Long deformity = null;
		Long oldandinfirm = new Long(0);
		Long workability = null;
		Long ftaplevel=null;
		String picpath = "";
		Long student = new Long(101);
		Long health = new Long(0);
		String otherreason = "";
		String indiId = "";
		SqlMapper sqlmapper = new SqlMapper();
		SqlMapClient client = sqlmapper.getSqlMapper();
		try {
			client.startTransaction();
			InfoTMemberDAO memberdao = new InfoTMemberDAO(client);
			InfoTMember member = new InfoTMember();
			if ("M".equals(type)) {
				if (null != memberId && !"".equals(memberId)) {
					member = memberdao.selectMemberById(memberId);
					if (null == member || null == member.getFamilyId()) {
						member.setFamilyId(new Integer(familyId));
					} else {
						familyId = member.getFamilyId().toString();
						memberId = member.getMemberId().toString();
						relmaster = member.getRelmaster();
						membername = member.getMembername();
						papertype = member.getPapertype();
						paperid = member.getPaperid();
						birthday = member.getBirthday();
						sex = member.getSex();
						nation = member.getNation();
						ismarriage = member.getIsmarriage();
						political = member.getPolitical();
						rprkind = member.getRprkind();
						rprtype = member.getRprtype();
						rpraddress = member.getRpraddress();
						degreesort = member.getDegreesort();
						policy = member.getPolicy();
						ftap = member.getFtap();
						sicken = member.getSicken();
						deformity = member.getDeformity();
						oldandinfirm = member.getOldandinfirm();
						otherreason = member.getOtherreason();
						if (null == oldandinfirm) {
							oldandinfirm = new Long(0);
						}
						workability = member.getWorkability();
						picpath = member.getPicpath();
						student = member.getStudent();
						health = member.getHealth();
						indiId = member.getIndiId();
						ftaplevel=member.getFtaplevel();
						log.debug(memberId + "    当前编辑的家庭成员       "
								+ member.getMembername());
						request.setAttribute("model",
								"当前正在编辑       " + member.getMembername()
										+ "   信息");
					}
				}
			} else if ("D".equals(type)) {
				/*
				 * boolean cnt = memberdao.isRemove(memberId); if (cnt) {
				 * memberdao.deleteOptcheckForMember(memberId, familyId);
				 * memberdao.deleteMemberclass(memberId);
				 * memberdao.deleteMember(memberId); member.setFamilyId(new
				 * Integer(familyId)); memberdao.getFamilyCount(member); } else
				 * { request.setAttribute("model",
				 * "删除失败，有业务正在审批中,请先结束业务审批，再删除此家庭成员 "); }
				 */
			} else {
				request.setAttribute("model", "新建家庭成员");
			}

			memberlist = memberdao.getMembersByFamilyId(familyId);
			String mlisthtml = "";
			for (InfoTMember mmmm : memberlist) {
				String rel = "<a href=\"#\" onclick=\"c('"
						+ mmmm.getFamilyId().toString() + "','"
						+ mmmm.getMemberId() + "')\">删除</a>";

				if (!"112".equals(mmmm.getRelmaster().toString())) {
				} else {
					rel = "&nbsp;&nbsp;&nbsp;&nbsp;";
				}
				mlisthtml = mlisthtml
						+ "<tr><td>"
						+ mmmm.getMembername()
						+ "</td><td>"
						+ dh.getDictsortToValue(dictionary, mmmm.getPapertype()
								.toString())
						+ "</td><td>"
						+ mmmm.getPaperid()
						+ "</td><td>"
						+ dh.getDictsortToValue(dictionary, mmmm.getRelmaster()
								.toString())
						+ "</td><td>"
						+ "<a href=\"memberbaseinit.do?type=M&familyId="
						+ mmmm.getFamilyId().toString()
						+ "&memberId="
						+ mmmm.getMemberId()
						+ "\" target=\"_self\" onclick=\"return confirm('是否维护  "
						+ mmmm.getMembername() + "  信息?')\">修 改</a>"
						+ "</td><td>" + rel + "</td></tr>";
			}

			Document pagedoc = DocumentHelper.createDocument();
			Element dict = null;

			Element root = pagedoc.addElement("table");
			root.addAttribute("width", "99%").addAttribute("class", "table8")
					.addAttribute("cellpadding", "0")
					.addAttribute("cellspacing", "0");

			Element tr1 = root.addElement("tr");
			tr1.addElement("th").addAttribute("width", "100").setText("姓名");
			tr1.addElement("td").addAttribute("width", "160")
					.addElement("input").addAttribute("name", "membername")
					.addAttribute("type", "text")
					.addAttribute("value", membername);
			tr1.addElement("th").addAttribute("width", "100").setText("与户主关系");
			if ("112".equals(relmaster.toString())) {
				Element td = tr1.addElement("td").addAttribute("width", "160");
				td.setText(dh.getDictsortToValue(dictionary,
						relmaster.toString()));
				td.addElement("input").addAttribute("type", "hidden")
						.addAttribute("value", relmaster.toString())
						.addAttribute("name", "relmaster");
			} else {
				dict = dh.getDictsortToXML(dictionary, "103", relmaster);
				Node node = dict
						.selectSingleNode("/select/option[@value='112']");
				dict.remove(node);
				dict.addAttribute("name", "relmaster");
				tr1.addElement("td").addAttribute("width", "160")
						.add((Element) dict.clone());
			}
			// 照片位置
			Element inchelement = tr1.addElement("td")
					.addAttribute("colspan", "2").addAttribute("rowspan", "10")
					.addAttribute("valign", "top")
					.addAttribute("align", "left");

			// 照片路径
			String basePath = request.getScheme() + "://"
					+ request.getServerName() + ":" + request.getServerPort()
					+ "/usr/upload/inch" + picpath;
			if (null == picpath || "".equals(picpath)) {
				basePath = "../../images/nopic.gif";
			}
			inchelement.addElement("div").addAttribute("id", "inchdiv")
					.addElement("img").addAttribute("id", "inch")
					.addAttribute("src", basePath)
					.addAttribute("width", "130px")
					.addAttribute("height", "160px");
		/*	inchelement.addElement("div").addElement("input")
					.addAttribute("type", "file").addAttribute("name", "inch")
					.addAttribute("style", "width:150px")
					.addAttribute("onchange", "perImg(this.value)");*/
			inchelement.addElement("div").addElement("input")
			.addAttribute("type", "button").addAttribute("value","上传照片").addAttribute("onclick", "up()").addAttribute("style", "width:150px");

			Element tr2 = root.addElement("tr");
			tr2.addElement("th").addAttribute("width", "100").setText("证件类型");
			dict = dh.getDictsortToXML(dictionary, "270", papertype);
			dict.addAttribute("name", "papertype");
			tr2.addElement("td").addAttribute("width", "160")
					.add((Element) dict.clone());
			tr2.addElement("th").addAttribute("width", "100").setText("证件号码");
			tr2.addElement("td").addAttribute("width", "160")
					.addElement("input").addAttribute("name", "paperid")
					.addAttribute("type", "text")
					.addAttribute("value", paperid)
					.addAttribute("onblur", "editbypaperid()");

			Element tr3 = root.addElement("tr");
			tr3.addElement("th").addAttribute("width", "100").setText("出生日期");

			String birthdaystr = "";
			if (null == birthday) {

			} else {
				SimpleDateFormat simpleDateFormat = new SimpleDateFormat(
						"yyyy-MM-dd");
				birthdaystr = simpleDateFormat.format(birthday);
			}

			tr3.addElement("td").addAttribute("width", "160")
					.addElement("input").addAttribute("name", "birthday")
					.addAttribute("type", "text")
					.addAttribute("readonly", "true")
					.addAttribute("onfocus", "setday(this)")
					.addAttribute("value", birthdaystr);
			tr3.addElement("th").addAttribute("width", "100").setText("性别");
			dict = dh.getDictsortToXML(dictionary, "1", sex);
			dict.addAttribute("name", "sex");
			tr3.addElement("td").addAttribute("width", "160")
					.add((Element) dict.clone());

			Element tr4 = root.addElement("tr");
			tr4.addElement("th").addAttribute("width", "100").setText("民族");
			dict = dh.getDictsortToXML(dictionary, "120", nation);
			dict.addAttribute("name", "nation");
			tr4.addElement("td").addAttribute("width", "160")
					.add((Element) dict.clone());
			tr4.addElement("th").addAttribute("width", "100").setText("政治面貌");
			dict = dh.getDictsortToXML(dictionary, "182", political);
			dict.addAttribute("name", "political");
			tr4.addElement("td").addAttribute("width", "160")
					.add((Element) dict.clone());

			Element tr33 = root.addElement("tr");

			tr33.addElement("th").addAttribute("width", "100").setText("身体状况");
			dict = dh.getDictsortToXML(dictionary, "5168560", health);
			dict.addAttribute("name", "health");
			tr33.addElement("td").addAttribute("width", "160")
					.add((Element) dict.clone());

			tr33.addElement("th").addAttribute("width", "100").setText("劳动能力");
			dict = dh.getDictsortToXML(dictionary, "170", workability);
			dict.addAttribute("name", "workability");
			tr33.addElement("td").addAttribute("width", "160")
					.add((Element) dict.clone());

			Element tr34 = root.addElement("tr");
			tr34.addElement("th").addAttribute("width", "100").setText("婚姻状况");
			dict = dh.getDictsortToXML(dictionary, "180", ismarriage);
			dict.addAttribute("name", "ismarriage");
			tr34.addElement("td").addAttribute("width", "160")
					.add((Element) dict.clone());

			tr34.addElement("th").addAttribute("width", "100")
					.setText("新农合保险号");
			tr34.addElement("td").addAttribute("colspan", "1")
					.addAttribute("width", "160").addElement("input")
					.addAttribute("name", "indiId")
					.addAttribute("type", "text").addAttribute("value", indiId);

			Element tr11 = root.addElement("tr");
			tr11.addElement("th").addAttribute("width", "100").setText("户口类型");
			dict = dh.getDictsortToXML(dictionary, "190", rprtype);
			dict.addAttribute("name", "rprtype");
			tr11.addElement("td").addAttribute("width", "160")
					.add((Element) dict.clone());
			tr11.addElement("th").addAttribute("width", "100").setText("身份类别");
			dict = dh.getDictsortToXML(dictionary, "130", degreesort);
			dict.addAttribute("name", "degreesort");
			tr11.addElement("td").addAttribute("width", "160")
					.add((Element) dict.clone());

			Element tr5 = root.addElement("tr");
			tr5.addElement("th").addAttribute("width", "100").setText("参加保险情况");
			dict = dh.getDictsortToXML(dictionary, "5161207", policy);
			dict.addAttribute("name", "policy");
			tr5.addElement("td").addAttribute("width", "160")
					.add((Element) dict.clone());
			tr5.addElement("th").addAttribute("width", "100").setText("患病情况");
			dict = dh.getDictsortToXML(dictionary, "380", sicken);
			dict.addAttribute("name", "sicken");
			tr5.addElement("td").addAttribute("width", "160")
					.add((Element) dict.clone());

			Element tr12 = root.addElement("tr");
			tr12.addElement("th").addAttribute("width", "100")
					.setText("在校学生类型");
			dict = dh.getDictsortToXML(dictionary, "383", student);
			dict.addAttribute("name", "student");
			tr12.addElement("td").addAttribute("width", "160")
					.add((Element) dict.clone());
			tr12.addElement("th").addAttribute("width", "100").setText("残疾情况");
			dict = dh.getDictsortToXML(dictionary, "381", deformity);
			dict.addAttribute("name", "deformity");
			tr12.addElement("td").addAttribute("width", "160")
					.add((Element) dict.clone());
			Element tr9 = root.addElement("tr");
			tr9.addElement("th").addAttribute("width", "100").setText("是否优抚对象");
			dict = dh.getDictsortToXML(dictionary, "100", ftap);
			dict.addAttribute("name", "ftap");
			tr9.addElement("td").addAttribute("width", "160")
					.add((Element) dict.clone());

			tr9.addElement("th").addAttribute("width", "100").setText("等级");
			dict = dh.getDictsortToXML(dictionary, "444", ftaplevel);
			dict.addAttribute("name", "ftaplevel");
			tr9.addElement("td").addAttribute("width", "160")
					.add((Element) dict.clone());
			// 单选按钮
			if ("112".equals(relmaster.toString())) {

				Element tr13 = root.addElement("tr");
				tr13.addElement("th").addAttribute("width", "100")
						.setText("年老体弱家庭类型");
				dict = dh.getDictsortToXML(dictionary, "382", oldandinfirm);
				dict.addAttribute("name", "oldandinfirm");
				tr13.addElement("td").addAttribute("colspan", "5")
						.add((Element) dict.clone());

				/*
				 * ArrayList<SysTDictionary> olds = dh.getDictsortToArrayList(
				 * dictionary, "382"); if (null != olds) { Element tr13 =
				 * root.addElement("tr");
				 * tr13.addElement("th").setText("年老体弱家庭类型"); Element td =
				 * tr13.addElement("td").addAttribute("colspan", "5"); Element
				 * table = td.addElement("table").addAttribute("width",
				 * "100%").addAttribute("border", "0").addAttribute(
				 * "cellspacing", "0").addAttribute("cellpadding", "0"); for
				 * (int i = 0; i < olds.size(); i++) { Element tabletr =
				 * table.addElement("tr"); Element oldtd =
				 * tabletr.addElement("td").addAttribute( "width", "60");
				 * Element oldtd1 = tabletr.addElement("td"); SysTDictionary
				 * sysTDictionary = (SysTDictionary) olds .get(i); if
				 * (sysTDictionary.getDictionaryId().toString().equals(
				 * oldandinfirm.toString())) {
				 * oldtd.addElement("input").addAttribute("name",
				 * "oldandinfirm").addAttribute("type", "radio") .addAttribute(
				 * "value", sysTDictionary.getDictionaryId()
				 * .toString()).addAttribute( "checked", "checked");
				 * oldtd1.setText(sysTDictionary.getItem()); } else {
				 * oldtd.addElement("input").addAttribute("name",
				 * "oldandinfirm").addAttribute("type", "radio") .addAttribute(
				 * "value", sysTDictionary.getDictionaryId() .toString());
				 * oldtd1.setText(sysTDictionary.getItem()); } } }
				 */
			}
			/*
			 * Element tr16 = root.addElement("tr");
			 * tr16.addElement("th").addAttribute("width", "100")
			 * .setText("在校学生类型"); dict = dh.getDictsortToXML(dictionary, "383",
			 * student); dict.addAttribute("name", "student");
			 * tr16.addElement("td").addAttribute("width", "160").add( (Element)
			 * dict.clone()); tr16.addElement("td").setText("    ");
			 * tr16.addElement("td").setText("    ");
			 * tr16.addElement("td").setText("    ");
			 * tr16.addElement("td").setText("    ");
			 */

			/*
			 * Element tr8 = root.addElement("tr");
			 * tr8.addElement("th").addAttribute("width",
			 * "100").setText("户口所在地");
			 * tr8.addElement("td").addAttribute("colspan", "5").addAttribute(
			 * "width", "400").addElement("input").addAttribute("name",
			 * "rpraddress").addAttribute("type", "text").addAttribute( "value",
			 * rpraddress);
			 */

			

			Element tr35 = root.addElement("tr");
			tr35.addElement("th").addAttribute("width", "100").setText("其他原因");
			tr35.addElement("td").addAttribute("colspan", "5")
					.addAttribute("width", "160").addElement("input")
					.addAttribute("name", "otherreason")
					.addAttribute("type", "text")
					.addAttribute("value", otherreason);

			request.setAttribute("familyId", familyId);
			request.setAttribute("memberId", memberId);
			request.setAttribute("picpath", picpath);
			request.setAttribute("memberlist", mlisthtml);

			request.setAttribute("pagehtml", root.asXML());

			client.commitTransaction();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				client.endTransaction();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		return mapping.findForward("memberbase");
	}
}