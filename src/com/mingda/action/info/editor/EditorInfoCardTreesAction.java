/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.info.editor;

import java.util.Iterator;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

import com.mingda.common.SessionFactory;
import com.mingda.common.node.TreeHandle;
import com.mingda.common.node.TreeHandleImpl;
import com.mingda.common.page.PageView;

/**
 * MyEclipse Struts Creation date: 06-21-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class EditorInfoCardTreesAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	static Logger log = Logger.getLogger(EditorInfoCardTreesAction.class);
	@SuppressWarnings("rawtypes")
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String nodeName = request.getParameter("nodeName");
		String nodeId = request.getParameter("nodeId");
		Document dictionary = (Document) this.servlet.getServletContext()
				.getAttribute("dictionary");

		// 从服务器中取出结构xml
		Document treedoc = (Document) servlet.getServletContext().getAttribute(
				"tree");
		TreeHandle tree = new TreeHandleImpl(treedoc);

		PageView pv = new PageView();

		// 创建文档
		Document doc = DocumentHelper.createDocument();
		// 设置XML编码
		doc.setXMLEncoding("GB18030");
		// 添加根节点
		Element root = doc.addElement("ul");
		log.debug("读取xml    "+ nodeName + "   id    " + nodeId);
		Document temp = tree.selectSingleEntity(nodeName, new Long(nodeId));
		
		Element docs = temp.getRootElement();
		if (!docs.selectNodes("//" + nodeName + "/@caption").isEmpty()) {
			Iterator it = docs.elementIterator();
			while (it.hasNext()) {
				Element tempp = (Element) it.next();
				Iterator tempcit = tempp.elementIterator();
				String pk = "";
				String caption = "";
				while (tempcit.hasNext()) {
					Element tempc = (Element) tempcit.next();
					if (tempc.attribute("isprimary") != null
							&& tempc.attributeValue("isprimary").equals("true")) {
						pk = tempc.getText();
					}

					if (tempc.attribute("iscaption") != null
							&& tempc.attributeValue("iscaption").equals("1")) {
						if (tempc.attribute("dicsort") != null) {
							caption += pv.getDictionartHandle()
									.getDictsortToValue(dictionary,
											tempc.getText())
									+ " ";
						} else {
							if (tempc.getText() == null
									|| tempc.getText().equals("")) {
								caption += tempc.attributeValue("default")
										+ " ";
							} else {
								caption += tempc.getText() + " ";
							}
						}
					}
				}
				Element li = root.addElement("li");// 添加li
				if (nodeName.equals("FAMILYINCOME")
						|| nodeName.equals("FAMILYCLASS")
						|| nodeName.equals("MEMBERCLASS")
						|| nodeName.equals("PAYOUT")
						|| nodeName.equals("MEMBERINCOME")) {
					li.addAttribute("class", "Opened");
				} else {
					li.addAttribute("class", "Closed");
				}
				Element img = li.addElement("img");// 添加图像标签
				img.addAttribute("onclick", "javascript:ChangeStatus(this,'"
						+ nodeName + "','ENTITY','" + pk + "');");
				img.addAttribute("class", "s");
				img.addAttribute("src", "../../images/tree/s.gif");
				Element a = li.addElement("span");
				a.addAttribute("onclick", "viewNode(this,'" + nodeName + "',"
						+ pk + "," + nodeId + ")");
				a.setText(caption);
				a.addAttribute("style", "cursor:hand");
				Element button = li.addElement("button");
				button.addAttribute(
						"onclick",
						"viewNode(this,'" + nodeName + "'," + pk + "," + nodeId
								+ ")").addAttribute("style",
						"cursor:hand;width:14;height:14;border:0").addElement(
						"img").addAttribute("border", "0").addAttribute(
						"width", "14").addAttribute("height", "14")
						.addAttribute("src", "../../images/check1.gif");
			}
		}
		SessionFactory.closeSession();
		log.debug("信息xml "+root.asXML());
		request.setAttribute("familytree", root.asXML());
		return mapping.findForward("editorFrameset");
	}
}