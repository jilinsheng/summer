/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.info.editor;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.Node;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;

import com.mingda.common.SessionFactory;
import com.mingda.common.node.TreeHandle;
import com.mingda.common.node.TreeHandleImpl;

/**
 * MyEclipse Struts Creation date: 07-23-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class DeleteNodeAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	static Logger log = Logger.getLogger(DeleteNodeAction.class);

	@SuppressWarnings("deprecation")
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		int flag = 0;
		Document treedoc = (Document) this.servlet.getServletContext()
				.getAttribute("tree");

		TreeHandle tree = new TreeHandleImpl(treedoc);

		String code = request.getParameter("code");
		String codeId = request.getParameter("curId");

		Document doc = tree.selectSingleEntity(code, new Long(codeId));

		String pk = "";
		String pname = "";
		String relmaster = "";

		Element element = (Element) doc.getRootElement().selectSingleNode(
				"//property[@isprimary='true']");

		pk = element.getText();
		pname = element.attributeValue("column");

		Node rel = doc.getRootElement().selectSingleNode(
				"//property[@column='RELMASTER']");
		if (null != rel) {
			relmaster = rel.getText();
			log.debug("是否是户主标识：" + relmaster);
		}

		Session session = SessionFactory.getSession();
		Transaction tx = session.beginTransaction();
		Connection con = session.connection();

		try {
			PreparedStatement ps = null;

			if (!"112".equals(relmaster)) {

				if ("MEMBER".equals(code)) {
					ps = con
							.prepareStatement("delete from info_t_memberincome t where t.member_id = "
									+ pk);
					log
							.debug("delete from info_t_memberincome t where t.member_id = "
									+ pk);
					ps.execute();
					ps = con
							.prepareStatement("delete from info_t_memberclass cl where cl.member_id="
									+ pk);
					ps.execute();
				}
				ps = con.prepareStatement("delete from info_t_" + code
						+ " where " + pname + "=" + pk);
				log.debug("delete from info_t_" + code + " where " + pname
						+ "=" + pk);
				ps.execute();
			} else {
				flag = 3;
			}
			tx.commit();
		} catch (SQLException e) {
			try {
				flag = 1;
				tx.rollback();
			} catch (HibernateException e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();
		} finally {
			session.close();
		}
		response.setCharacterEncoding("GB18030");
		response.setContentType("text/html");
		try {
			PrintWriter out = response.getWriter();
			out.println(flag);
			out.flush();
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
}