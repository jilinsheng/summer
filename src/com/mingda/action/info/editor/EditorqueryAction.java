/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.info.editor;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Session;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.mingda.common.SessionFactory;
import com.mingda.common.ibatis.SqlMapper;
import com.mingda.common.ibatis.dao.InfoTFamilyDAO;
import com.mingda.common.ibatis.dao.InfoTMemberDAO;
import com.mingda.common.ibatis.data.InfoTFamily;
import com.mingda.common.ibatis.data.InfoTMember;
import com.mingda.entity.SysTEmployee;

/**
 * MyEclipse Struts Creation date: 07-01-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class EditorqueryAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@SuppressWarnings("deprecation")
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		ArrayList<InfoTMember> list = new ArrayList<InfoTMember>();

		String rname = request.getParameter("rname");
		String paperid = request.getParameter("paperid");
		String pt = request.getParameter("pt");

		Session session = SessionFactory.getSession();
		PreparedStatement ps = null;
		Connection conn = null;
		ResultSet rs = null;
		conn = session.connection();
		String sql = "select mem.*,fam.familyno from info_t_member mem, info_t_family fam "
				+ "where fam.family_id = mem.family_id and mem.papertype = '"
				+ pt
				+ "'  "
				+ "and mem.paperid = '"
				+ paperid
				+ "' and fam.status = 1";
		int i = 0;
		try {
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			while (rs.next()) {
				InfoTMember member = new InfoTMember();
				member.setMembername(rs.getString("membername"));
				member.setFamilyId(new Integer(rs.getString("family_id")));
				member.setPicpath(rs.getString("familyno"));
				member.setOtherreason(rs.getString("paperid"));
				list.add(member);
				i++;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				session.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if (i == 0) {
			HttpSession hsession = request.getSession();
			SysTEmployee employee = (SysTEmployee) hsession
					.getAttribute("employee");

			String orgid = employee.getSysTOrganization().getOrganizationId();

			boolean flag = false;

			if (null == orgid || "".equals(orgid)) {
				flag = false;
			} else {
				if (orgid.length() == 10) {
					flag = true;
				} else {
					flag = false;
				}
			}
			
			if(!flag){
				request.setAttribute("str", "不是正确的机构编号，请重新登录系统。");
				return mapping.findForward("familylist");
			}
			
			SqlMapClient client = SqlMapper.getSqlMapper();

			InfoTFamilyDAO infoTFamilyDAO = new InfoTFamilyDAO(client);
			InfoTMemberDAO infoTMemberDAO = new InfoTMemberDAO(client);
			InfoTFamily infoTFamily = new InfoTFamily();
			InfoTMember infoTMember = new InfoTMember();
			try {

				client.startTransaction();

				infoTFamily.setOrganizationId(new Long(employee
						.getSysTOrganization().getOrganizationId()));
				infoTFamily.setPopulation(new Long(1));
				infoTFamily.setEnsurecount(new Long(1));
				infoTFamily.setAllpayout(new Double(0));
				infoTFamily.setAssetworth(new Long(0));
				infoTFamily.setAvgincome(new Double(0));
				infoTFamily.setConsultincome(new Long(0));
				Integer familyid = (Integer) infoTFamilyDAO
						.insertFamily(infoTFamily);

				infoTMember.setFamilyId(familyid);
				infoTMember.setPaperid(paperid);
				infoTMember.setPapertype(new Long(pt));
				infoTMember.setMembername(rname);
				infoTMember.setRelmaster(new Long("112"));
				infoTMember.setRprkind(new Long("367"));
				infoTMember.setRprtype(new Long("261"));
				if ("390".equals(pt)) {
					String year = "";
					String month = "";
					String day = "";
					String sex = "";
					if (18 == paperid.length()) {
						year = paperid.substring(6, 10);
						month = paperid.substring(10, 12);
						day = paperid.substring(12, 14);
						sex = "11"
								+ ((new BigDecimal(paperid.substring(16, 17))
										.intValue() + 1) % 2);
					} else if (15 == paperid.length()) {
						year = "19" + paperid.substring(6, 8);
						month = paperid.substring(8, 10);
						day = paperid.substring(10, 12);
						sex = "11"
								+ ((new BigDecimal(paperid.substring(14))
										.intValue() + 1) % 2);
					} else {
					}
					// log.debug("  " +year+"  " +month+"  " +day);
					Date date = null;

					SimpleDateFormat simpleDateFormat = new SimpleDateFormat(
							"yyyy-MM-dd");

					date = simpleDateFormat.parse(year + "-" + month + "-"
							+ day);

					infoTMember.setBirthday(date);
					infoTMember.setSex(new Long(sex));
				}
				infoTMember.setMemberId(new Integer(infoTMemberDAO
						.getMemberPK()));
				infoTMemberDAO.insertmember(infoTMember);
				client.commitTransaction();
			} catch (SQLException e) {
				e.printStackTrace();
			} catch (ParseException e) {
				e.printStackTrace();
			} finally {
				try {
					client.endTransaction();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}

			ActionForward forward = new ActionForward(
					"/page/info/neweditor/editorframe.jsp?nodeId="
							+ infoTFamily.getFamilyId().toString());
			forward.setRedirect(true);
			return (forward);
		} else {
			request.setAttribute("list", list);
			return mapping.findForward("familylist");
		}
	}
}