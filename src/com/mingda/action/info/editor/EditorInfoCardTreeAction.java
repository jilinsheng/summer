/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.info.editor;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Iterator;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

import com.mingda.common.SessionFactory;
import com.mingda.common.dictionary.DictionaryHandle;
import com.mingda.common.node.TreeHandle;
import com.mingda.common.node.TreeHandleImpl;

/**
 * MyEclipse Struts Creation date: 06-21-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class EditorInfoCardTreeAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	static Logger log = Logger.getLogger(EditorInfoCardTreeAction.class);
	@SuppressWarnings("rawtypes")
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		// 定义页面返回用的Document
		Document doc = DocumentHelper.createDocument();

		// 设置XML编码
		doc.setXMLEncoding("GB18030");
		Element root = doc.addElement("root");
		String code = request.getParameter("code");
		String objtype = request.getParameter("objtype");
		String objid = request.getParameter("objid");
		String id = request.getParameter("id");// 判断是否回显
		// 取出全局字典ID
		Document dictdoc = (Document) this.servlet.getServletContext()
				.getAttribute("dictionary");
		DictionaryHandle dh = new DictionaryHandle();

		// 从服务器中取出结构xml
		Document treedoc = (Document) servlet.getServletContext().getAttribute(
				"tree");
		TreeHandle th = new TreeHandleImpl(treedoc);

		// 如果操作节点为实体节点
		if (objtype != null && objtype.equals("ENTITY")) {
			// 取出对应的数据实体
			Element entity = (Element) th.selectSingleEntity(code,
					new Long(objid)).getRootElement().selectSingleNode(code);
			root.addElement("img").addAttribute("class", "s").addAttribute(
					"src", "/db/page/images/tree/s.gif").addAttribute(
					"onClick",
					"javascript:ChangeStatus(this,'" + code + "','ENTITY','"
							+ objid + "');");
			// 家庭ID和显示信息卡片在此操作
			Element a = root.addElement("span");
			a.addAttribute("onclick", "viewNode(this,'" + entity.getName()
					+ "'," + objid + "," + id + ")");
			a.addAttribute("style", "cursor:hand");

			Element button = root.addElement("button");
			button
					.addAttribute(
							"onclick",
							"viewNode(this,'" + entity.getName() + "'," + objid
									+ "," + id + ")")
					.addAttribute("style",
							"padding-left:3px;cursor:hand;width:17;height:14;border:0;background:#ececec")
					.addElement("img").addAttribute("border", "0")
					.addAttribute("width", "14").addAttribute("height", "14")
					.addAttribute("src", "../../images/check1.gif")
					.addAttribute("alt", "修改");

			String caption = "";
			Iterator tempcit = entity.elementIterator();
			while (tempcit.hasNext()) {
				Element tempc = (Element) tempcit.next();
				if (tempc.attribute("iscaption") != null
						&& tempc.attributeValue("iscaption").equals("1")) {
					if (tempc.attribute("dicsort") != null) {
						caption += dh.getDictsortToValue(dictdoc, tempc
								.getText())
								+ " ";
					} else {
						if(tempc.getText()==null||tempc.getText().equals("")){
							caption += tempc.attributeValue("default") + " ";
						}else{
							caption += tempc.getText() + " ";
						}
					}
				}
			}
			a.setText(caption);
			Iterator it = null;
			// 取实体节点的属性子节点信息
			/*
			 * it= entity.elementIterator("property"); // 增加属性子点节点信息到XML中 while
			 * (it.hasNext()) { Element element = (Element) it.next();
			 * log.debug("=====================" +
			 * element.attributeValue("dicsort")); if
			 * (element.attributeValue("dicsort") != null &&
			 * !element.attributeValue("dicsort").equals("-1")) {
			 * DictionaryHandle dh = new DictionaryHandle();
			 * element.setText(dh.getDictsortToValue(dictdoc, element
			 * .getText())); } log.debug(element.getText()); Element li =
			 * curNode.addElement("li").addAttribute("class", "Child");
			 * li.addElement("img").addAttribute("class", "s").addAttribute(
			 * "src", "/db/page/images/tree/s.gif").setText(
			 * element.attributeValue("title") + ":" + element.getText()); }
			 */
			// 取实体节点的结构子节点信息
			Document temp = th.getChild(code);
			if (!temp.getRootElement().elements().isEmpty()) {
				Element curNode = root.addElement("ul");
				it = temp.getRootElement().elementIterator();
				while (it.hasNext()) {
					Element element = (Element) it.next();
					Element li = curNode.addElement("li");
					if (element.getName().equals("FAMILYINCOME")
							|| element.getName().equals("FAMILYCLASS")
							|| element.getName().equals("MEMBERCLASS")
							|| element.getName().equals("PAYOUT")
							|| element.getName().equals("MEMBERINCOME")||element.getName().equals("ASSET")) {
						li.addAttribute("class", "Opened");
					} else {
						li.addAttribute("class", "Closed");
					}
					li.addElement("img").addAttribute("class", "s")
							.addAttribute("src", "/db/page/images/tree/s.gif")
							.addAttribute(
									"onClick",
									"javascript:ChangeStatus(this,'"
											+ element.getName()
											+ "','STRUCT','" + objid + "');");
					a = li.addElement("span");
					a
							.addAttribute("onclick", "getCurrentList(this,'"
									+ element.getName() + "'," + objid + ","
									+ id + ")");
					a.setText(element.attributeValue("title"));
					a.addAttribute("style", "cursor:hand;color:#5A81AF");

					button = li.addElement("button");
					button
							.addAttribute(
									"onclick", "getCurrentList(this,'"
									+ element.getName() + "'," + objid + ","
									+ id + ")")
							.addAttribute("style",
									"padding-left:3px;cursor:hand;width:17;height:14;border:0;background:#ececec")
							.addElement("img").addAttribute("border", "0")
							.addAttribute("width", "14").addAttribute("height",
									"14").addAttribute("src",
									"../../images/view.gif").addAttribute(
									"alt", "显示列表");

				}
			}
		}
		// 如果操作节点为结构节点
		if (objtype != null && objtype.equals("STRUCT")) {
			Element struct = th.getBranch(code).getRootElement().element(code);
			root.addElement("img").addAttribute("class", "s").addAttribute(
					"src", "/db/page/images/tree/s.gif").addAttribute(
					"onClick",
					"javascript:ChangeStatus(this,'" + code + "','STRUCT','"
							+ objid + "');");
			Element a = root.addElement("span");
			a.addAttribute("style", "cursor:hand;color:#5A81AF");
			a.addAttribute("onclick", "getCurrentList(this,'"
					+ struct.getName() + "'," + objid + "," + id + ")");
			a.setText(struct.attributeValue("title"));

			Element button = root.addElement("button");
			button
					.addAttribute(
							"onclick",
							"getCurrentList(this,'" + struct.getName() + "',"
									+ objid + "," + id + ")")
					.addAttribute("style",
							"padding-left:3px;cursor:hand;width:17;height:14;border:0;background:#ececec")
					.addElement("img").addAttribute("border", "0")
					.addAttribute("width", "14").addAttribute("height", "14")
					.addAttribute("src", "../../images/view.gif").addAttribute(
							"alt", "显示列表");

			Element docs = th.selectEntities(code, new Long(objid))
					.getRootElement();
			// 结构节点 是否有值
			if (!docs.selectNodes("//" + code + "/@caption").isEmpty()) {
				Element curNode = root.addElement("ul");
				Iterator it = docs.elementIterator();
				while (it.hasNext()) {
					Element element = (Element) it.next();
					Element li = curNode.addElement("li");
					if (element.getName().equals("FAMILYINCOME")
							|| element.getName().equals("FAMILYCLASS")
							|| element.getName().equals("MEMBERCLASS")
							|| element.getName().equals("PAYOUT")
							|| element.getName().equals("MEMBERINCOME")||element.getName().equals("ASSET")) {
						li.addAttribute("class", "Opened");
					} else {
						li.addAttribute("class", "Closed");
					}
					li
							.addElement("img")
							.addAttribute("class", "s")
							.addAttribute("src", "../../images/tree/s.gif")
							.addAttribute(
									"onClick",
									"javascript:ChangeStatus(this,'"
											+ element.getName()
											+ "','ENTITY','"
											+ element
													.selectSingleNode(
															"property[@isprimary=\"true\"]")
													.getText() + "');");
					a = li.addElement("span");
					a.addAttribute("style", "cursor:hand");
					String caption = "";
					Iterator tempcit = element.elementIterator();
					while (tempcit.hasNext()) {
						Element tempc = (Element) tempcit.next();
						if (tempc.attribute("iscaption") != null
								&& tempc.attributeValue("iscaption")
										.equals("1")) {
							if (tempc.attribute("dicsort") != null) {
								caption += dh.getDictsortToValue(dictdoc, tempc
										.getText())
										+ " ";
							} else {
								if(tempc.getText()==null||tempc.getText().equals("")){
									caption += tempc.attributeValue("default") + " ";
								}else{
									caption += tempc.getText() + " ";
								}
							}
						}
					}
					a.setText(caption);
					a.addAttribute("onclick", "viewNode(this,'"
							+ element.getName()
							+ "',"
							+ element.selectSingleNode(
									"property[@isprimary=\"true\"]").getText()
							+ "," + id + ")");
					a.addAttribute("style", "cursor:hand");
					button = li.addElement("button");
					button
							.addAttribute(
									"onclick",
									"viewNode(this,'"
											+ element.getName()
											+ "',"
											+ element
													.selectSingleNode(
															"property[@isprimary=\"true\"]")
													.getText() + "," + id + ")")
							.addAttribute("style",
									"padding-left:3px;cursor:hand;width:17;height:14;border:0;background:#ececec")
							.addElement("img").addAttribute("border", "0")
							.addAttribute("width", "14").addAttribute("height",
									"14").addAttribute("src",
									"../../images/check1.gif").addAttribute(
									"alt", "修改");
				}
			}
			;
			// 取结构节点的实体子节点信息
			// 增加至页面用的XML
		}
		try {
			response.setCharacterEncoding("GB18030");
			response.setContentType("text/xml");
			PrintWriter out = response.getWriter();
			log.debug("信息xml "+doc.asXML());
			out.write(doc.asXML());
			out.flush();
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}finally{
			SessionFactory.closeSession();
		}

		// request.getParameter("parentid");
		return null;
	}
}