/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.info.editor;

import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import java.util.Iterator;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.Node;

import com.mingda.common.ConstantDefine;
import com.mingda.common.SessionFactory;
import com.mingda.common.UploadFile;
import com.mingda.common.log4j.Log4jApp;
import com.mingda.common.node.TreeHandle;
import com.mingda.common.node.TreeHandleImpl;
import com.mingda.entity.SysTEmployee;
import com.mingda.form.UploadForm;

/**
 * MyEclipse Struts Creation date: 07-03-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class UploadAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@SuppressWarnings({ "rawtypes", "unused" })
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession httpsession = request.getSession();
		SysTEmployee employee = (SysTEmployee) httpsession
				.getAttribute("employee");
		Long empid = employee.getEmployeeId();
		UploadForm uplaodForm = (UploadForm) form;
		String type = request.getParameter("type");

		/**
		 * ajax url传过来的中文编码格式utf-8 request设置编码格式为utf-8
		 */
		try {
			request.setCharacterEncoding("utf-8");
		} catch (UnsupportedEncodingException e5) {
			e5.printStackTrace();
		}
		Enumeration enumeration = request.getParameterNames();
		Document doc = DocumentHelper.createDocument();
		doc.setXMLEncoding("GB18030");
		Element root = doc.addElement("ROOT");
		while (enumeration.hasMoreElements()) {
			String tagNmae = enumeration.nextElement().toString();
			String tagValue = request.getParameter(tagNmae);
			// 分解html标签形成xml
			String[] tagNames = tagNmae.split("/");
			if (tagNames.length == 2) {
				String name0 = tagNames[0];
				String name1 = tagNames[1];
				Iterator it = root.elementIterator(name0);
				if (it.hasNext()) {
					Element p = (Element) it.next();
					Element c = p.addElement("property");
					c.addAttribute("column", name1);
					c.setText(tagValue);
				} else {
					Element p = root.addElement(name0);
					Element c = p.addElement("property");

					c.addAttribute("column", name1);
					c.setText(tagValue);
				}
			}
		}
		String result = "0";

		Document treedoc = (Document) servlet.getServletContext().getAttribute(
				"tree");
		TreeHandle treehandle = new TreeHandleImpl(treedoc);
		ActionForward forward = null;
		String fk = "";
		String pk = "";
		String nodeName = "";

		try {
			if (!doc.getRootElement().elements().isEmpty()) {
				doc = treehandle.saveEntity(doc, empid);
				Log4jApp.logger(doc.asXML());
				result = "1";
				pk = doc.getRootElement().selectSingleNode(
						"//property[@isprimary='true']").getText();

				Node node = (Node) doc.getRootElement().elements().get(0);
				nodeName = node.getName();
				String origin = request.getParameter("origin");
				if (uplaodForm.getFile() != null
						&& !uplaodForm.getFile().getFileName().equals("")) {
					UploadFile uf = new UploadFile();
					try {
						fk = doc.getRootElement().selectSingleNode(
								"//property[@isforeign='true']").getText();
						pk = doc.getRootElement().selectSingleNode(
								"//property[@isprimary='true']").getText();
						// 删除
						if (null == origin || "".equals(origin)
								|| "null".equals(origin)) {
						} else {
							String uppath = ConstantDefine.UPLOADPATH;
							origin = origin.substring(origin.lastIndexOf("/"));
							uppath = uppath + "/" + fk + "/" + nodeName
									+ origin;
							File file = new File(uppath);
							Log4jApp.logger("删除照片路径 : " + uppath);
							file.delete();
						}
						// 删除
						node = (Node) doc.getRootElement().elements().get(0);
						nodeName = node.getName();
						String filename = uf.upload(uplaodForm.getFile(), fk
								+ "/" + nodeName + "/", java.util.UUID
								.randomUUID().toString());
						Log4jApp.logger(fk + "/" + nodeName + "/" + filename);
						doc.getRootElement().selectSingleNode(
								"//property[@column='URL']").setText(
								fk + "/" + nodeName + "/" + filename);
						doc.getRootElement().selectSingleNode(
								"//property[@column='TYPE']").setText(type);
						doc = treehandle.saveEntity(doc, empid);
					} catch (IOException e1) {
						e1.printStackTrace();
					}
				}
			} else {
				result = "2";
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			SessionFactory.closeSession();
		}
		forward = new ActionForward("/page/info/editor/uploadinit.do?codeId="
				+ pk + "&code=" + nodeName);
		return forward;
	}
}