/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.info.card;

import java.io.PrintWriter;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.Node;

import com.mingda.common.SessionFactory;
import com.mingda.common.node.TreeHandle;
import com.mingda.common.node.TreeHandleImpl;
import com.mingda.common.page.PageView;

/**
 * MyEclipse Struts Creation date: 06-25-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class GetCurrentListAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@SuppressWarnings("rawtypes")
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String nodeName = request.getParameter("nodeName");
		String nodeId = request.getParameter("nodeId");
		Document dictionary = (Document) this.servlet.getServletContext()
				.getAttribute("dictionary");

		Document treedoc = (Document) servlet.getServletContext().getAttribute(
				"tree");
		TreeHandle tree = new TreeHandleImpl(treedoc);

		PageView pv = new PageView();
		Document doc = tree.selectEntities(nodeName, new Long(nodeId));

		String html = "";
		try {
			if (nodeName.equals("PAPERS")) {
				List list = doc.getRootElement().selectNodes(
						"//" + nodeName + "/property[@column='URL']");
				List list1 = doc.getRootElement().selectNodes(
						"//" + nodeName + "/property[@column='TYPE']");
				doc = pv.writeListbyXML(doc, dictionary);
				Iterator it = doc.getRootElement().elementIterator();
				int i = 0;
				while (it.hasNext()) {
					Element tr = (Element) it.next();
					if (i == 0) {
						tr.addElement("th");
					} else {
						Node node = (Node) list.get(i - 1);
						Node node1 = (Node) list1.get(i - 1);
						if (node1.getText().equals("1")) {
							String basePath = request.getScheme() + "://"
									+ request.getServerName() + ":"
									+ request.getServerPort() + "/upload/";
							tr.addElement("td").addElement("a").addAttribute(
									"href", basePath + node.getText())
									.addAttribute("target", "_blank").setText(
											"查看");
						} else {
							tr.addElement("td").addElement("a").addAttribute(
									"href",
									"/db/page/info/card/view.do?filename="
											+ node.getText()).addAttribute(
									"target", "_blank").setText("查看");
						}
					}
					i++;
				}
				Element root = doc.getRootElement();
				Iterator it1 = root.elementIterator();
				while (it1.hasNext()) {
					Element tr = (Element) it1.next();
					Iterator tdit = tr.elementIterator();
					Element td = (Element) tdit.next();
					tr.remove(td);
				}
				if (doc.getRootElement().elements().isEmpty()) {
					html = "无记录";
				} else {
					html = "<table  class=\"tablelist\" cellpadding=\"0\" cellspacing=\"0\" border=\"1\">"
							+ doc.getRootElement().asXML() + "</table>";
				}
			} else if (nodeName.equals("ANNEX")) {
				List list = doc.getRootElement().selectNodes(
						"//" + nodeName + "/property[@column='URL']");
				List list1 = doc.getRootElement().selectNodes(
						"//" + nodeName + "/property[@column='TYPE']");
				doc = pv.writeListbyXML(doc, dictionary);
				Iterator it = doc.getRootElement().elementIterator();
				int i = 0;
				while (it.hasNext()) {
					Element tr = (Element) it.next();
					if (i == 0) {
						tr.addElement("th");
					} else {
						Node node = (Node) list.get(i - 1);
						Node node1 = (Node) list1.get(i - 1);
						if (node1.getText().equals("1")) {
							String basePath = request.getScheme() + "://"
									+ request.getServerName() + ":"
									+ request.getServerPort() + "/upload/";
							tr.addElement("td").addElement("a").addAttribute(
									"href", basePath + node.getText())
									.addAttribute("target", "_blank").setText(
											"查看");
						} else {
							tr.addElement("td").addElement("a").addAttribute(
									"href",
									"/db/page/info/card/view.do?filename="
											+ node.getText()).addAttribute(
									"target", "_blank").setText("查看");
						}
					}
					i++;
				}
				Element root = doc.getRootElement();
				Iterator it1 = root.elementIterator();
				while (it1.hasNext()) {
					Element tr = (Element) it1.next();
					Iterator tdit = tr.elementIterator();
					Element td = (Element) tdit.next();
					tr.remove(td);
				}
				if (doc.getRootElement().elements().isEmpty()) {
					html = "无记录";
				} else {
					html = "<table  class=\"tablelist\" cellpadding=\"0\" cellspacing=\"0\" border=\"1\">"
							+ doc.getRootElement().asXML() + "</table>";
				}
			} else if (nodeName.equals("FAMILYINCOME")) {

				// 布局表格
				Document total = DocumentHelper.createDocument();
				Element totalroot = total.addElement("table").addAttribute(
						"cellpadding", "0").addAttribute("cellpadding", "0")
						.addAttribute("border", "0");
				Element totaltr = totalroot.addElement("tr");
				Element totaltd = totaltr.addElement("td").addAttribute(
						"valign", "top");
				// 取出信息项目
				doc = pv.writeListbyXML(doc, dictionary);
				Element root = doc.getRootElement();
				Iterator it = root.elementIterator();
				while (it.hasNext()) {
					Element tr = (Element) it.next();
					Iterator tdit = tr.elementIterator();
					Element td = (Element) tdit.next();
					tr.remove(td);
				}
				// 转置表格
				Document doc1 = DocumentHelper.createDocument();
				Element root1 = doc1.addElement("table").addAttribute("class",
						"tablelist").addAttribute("cellpadding", "0")
						.addAttribute("cellspacing", "0").addAttribute(
								"border", "1");
				root1.addElement("tr").addElement("td").addAttribute("colspan",
						"2").setText("家庭收入信息");
				Element temptr = root1.addElement("tr");
				temptr.addElement("th").setText("收入项目");
				temptr.addElement("th").setText("金额");
				Element tr1 = (Element) doc.getRootElement().elements().get(0);
				Element tr2 = (Element) doc.getRootElement().elements().get(1);
				for (int i = 0; i < tr1.elements().size(); i++) {
					temptr = root1.addElement("tr");
					Element a = (Element) tr1.elements().get(i);
					Element b = (Element) tr2.elements().get(i);
					if (b.getText() == null || b.getText().equals("")) {
						b.setText("0");
					}
					temptr.addElement("td").setText(a.getText());
					temptr.addElement("td").setText(b.getText());
				}

				Document memberdoc = tree.selectEntities("MEMBER", new Long(
						nodeId));
				Iterator memberit = memberdoc.getRootElement()
						.elementIterator();
				totaltd.add((Element) doc1.getRootElement().clone());

				// 形成成员收入表格
				while (memberit.hasNext()) {
					// 布局表格
					totaltd = totaltr.addElement("td").addAttribute("valign",
							"top");

					Document mtable = DocumentHelper.createDocument();
					Element table = mtable.addElement("table").addAttribute(
							"class", "tablelist").addAttribute("cellpadding",
							"0").addAttribute("cellspacing", "0").addAttribute(
							"border", "1");
					Element tr = table.addElement("tr");
					Element member = (Element) memberit.next();
					Iterator propertys = member.elementIterator();
					String mid = "";
					String mname = "";
					while (propertys.hasNext()) {
						Element property = (Element) propertys.next();
						if (property.attributeValue("isprimary") != null
								&& property.attributeValue("isprimary").equals(
										"true")) {
							mid = property.getText();
						}
						if (property.attributeValue("column") != null
								&& property.attributeValue("column").equals(
										"MEMBERNAME")) {
							mname = property.getText();
						}
					}
					tr.addElement("td").addAttribute("colspan", "2").setText(
							mname);
					tr = table.addElement("tr");
					tr.addElement("th").setText("收入项目");
					tr.addElement("th").setText("金额");
					Document emberincomedoc = tree.selectEntities(
							"MEMBERINCOME", new Long(mid));
					Element memberincome = (Element) emberincomedoc
							.getRootElement().elements().get(0);
					Iterator mincomeit = memberincome.elementIterator();

					while (mincomeit.hasNext()) {
						tr = table.addElement("tr");
						Element ip = (Element) mincomeit.next();
						if (ip.attributeValue("islist") != null
								&& ip.attributeValue("status") != null
								&& ip.attributeValue("islist").equals("1")
								&& ip.attributeValue("status").equals("1")) {
							tr.addElement("td").setText(
									ip.attributeValue("title"));
							if (ip.getText() == null || ip.getText().equals("")) {
								ip.setText("0");
							}
							tr.addElement("td").setText(ip.getText());
						}
					}
					totaltd.add((Element) mtable.getRootElement().clone());
				}
				html = total.getRootElement().asXML();
				// 形成成员收入表格

			} else if (nodeName.equals("MEMBERINCOME")) {
				doc = pv.writeListbyXML(doc, dictionary);
				Element root = doc.getRootElement();
				Iterator it = root.elementIterator();
				while (it.hasNext()) {
					Element tr = (Element) it.next();
					Iterator tdit = tr.elementIterator();
					Element td = (Element) tdit.next();
					tr.remove(td);
				}
				Document doc1 = DocumentHelper.createDocument();
				Element root1 = doc1.addElement("tbody");
				Element temptr = root1.addElement("tr");
				temptr.addElement("th").setText("收入项目");
				temptr.addElement("th").setText("金额");
				Element tr1 = (Element) doc.getRootElement().elements().get(0);
				Element tr2 = (Element) doc.getRootElement().elements().get(1);
				for (int i = 0; i < tr1.elements().size(); i++) {
					temptr = root1.addElement("tr");
					Element a = (Element) tr1.elements().get(i);
					Element b = (Element) tr2.elements().get(i);
					if (b.getText() == null || b.getText().equals("")) {
						b.setText("0");
					}
					temptr.addElement("td").setText(a.getText());
					temptr.addElement("td").setText(b.getText());
				}
				doc = doc1;
				html = "<table  class=\"tablelist\" cellpadding=\"0\" cellspacing=\"0\" border=\"1\">"
						+ doc.getRootElement().asXML() + "</table>";
			} else if (nodeName.equals("PAYOUT")) {
				doc = pv.writeListbyXML(doc, dictionary);
				Element root = doc.getRootElement();
				Iterator it = root.elementIterator();
				while (it.hasNext()) {
					Element tr = (Element) it.next();
					Iterator tdit = tr.elementIterator();
					Element td = (Element) tdit.next();
					tr.remove(td);
				}
				if (doc.getRootElement().elements().isEmpty()) {
					html = "无记录";
				} else {
					html = "<table  class=\"tablelist\" cellpadding=\"0\" cellspacing=\"0\" border=\"1\">"
							+ doc.getRootElement().asXML() + "</table>";
				}
			} else {
				Document childdoc = tree.getChild(nodeName);
				Iterator childit = childdoc.getRootElement().elementIterator();
				String[] childtitles = new String[childdoc.getRootElement()
						.elements().size()];
				String[] childnames = new String[childdoc.getRootElement()
						.elements().size()];
				int i = 0;
				while (childit.hasNext()) {
					Element child = (Element) childit.next();
					childnames[i] = child.getName();
					childtitles[i] = child.attributeValue("title");
					i++;
				}

				String[] pks = new String[doc.getRootElement().elements()
						.size()];
				Iterator pkit = doc.getRootElement().elementIterator();
				int n = 0;
				while (pkit.hasNext()) {
					Element ele = (Element) pkit.next();
					Iterator it = ele.elementIterator();
					while (it.hasNext()) {
						Element element = (Element) it.next();
						if (element.attributeValue("isprimary") != null
								&& element.attributeValue("isprimary").equals(
										"true")) {
							pks[n] = element.getText();
						}
					}
					n++;
				}

				doc = pv.writeListbyXML(doc, dictionary);
				Element root = doc.getRootElement();
				Iterator it = root.elementIterator();
				int j = 0;
				while (it.hasNext()) {
					Element tr = (Element) it.next();
					if (j == 0) {
						for (int m = 0; m < childnames.length; m++) {
							tr.addElement("th").setText(childtitles[m]);
						}
					} else {
						for (int m = 0; m < childnames.length; m++) {
							tr.addElement("td").addElement("a").addAttribute(
									"href",
									"/db/page/info/card/getCurrentListout.do?nodeId="
											+ pks[j - 1] + "&nodeName="
											+ childnames[m]).addAttribute(
									"target", "_blank").setText("详细");
						}
					}
					Iterator tdit = tr.elementIterator();
					Element td = (Element) tdit.next();
					tr.remove(td);
					j++;
				}
				if (doc.getRootElement().elements().isEmpty()) {
					html = "无记录";
				} else {
					html = "<table  class=\"tablelist\" cellpadding=\"0\" cellspacing=\"0\" border=\"1\">"
							+ doc.getRootElement().asXML() + "</table>";
				}
			}
			PrintWriter out = response.getWriter();
			response.setCharacterEncoding("GB18030");
			response.setContentType("text/html");
			out.write(html);
			out.flush();
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			SessionFactory.closeSession();
		}
		return null;
	}
}