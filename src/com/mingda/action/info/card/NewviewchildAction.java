/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.info.card;

import java.util.Iterator;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.dom4j.Document;
import org.dom4j.Element;

import com.mingda.common.SessionFactory;
import com.mingda.common.node.TreeHandle;
import com.mingda.common.node.TreeHandleImpl;
import com.mingda.common.page.PageView;

/**
 * MyEclipse Struts Creation date: 08-04-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 * @struts.action-forward name="newviewchild"
 *                        path="/page/info/card/newviewchild.jsp"
 */
public class NewviewchildAction extends Action {
	static Logger log = Logger.getLogger(NewviewchildAction.class);
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@SuppressWarnings("rawtypes")
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String nodeId = request.getParameter("nodeId");
		String nodeName = request.getParameter("nodeName");
		Document dictionary = (Document) this.servlet.getServletContext()
				.getAttribute("dictionary");
		Document treedoc = (Document) servlet.getServletContext().getAttribute(
				"tree");

		TreeHandle tree = new TreeHandleImpl(treedoc);
		PageView pv = new PageView();
		Document doc = tree.selectSingleEntity(nodeName, new Long(nodeId));
		log.debug(doc.asXML());
		Element ee = (Element) doc.selectSingleNode("//" + nodeName);
		Document childnode = tree.getChild(nodeName);
		try {
			doc = pv.writeTablebyXML(doc, dictionary, 2);

			if (!childnode.getRootElement().elements().isEmpty()) {
				Element td = doc.getRootElement().addElement("tr").addElement(
						"td").addAttribute("colspan", "4");

				Iterator it = childnode.getRootElement().elementIterator();
				Element tablebnt = td.addElement("table").addAttribute(
						"border", "0").addAttribute("width", "100%")
						.addAttribute("cellpadding", "0").addAttribute(
								"cellspacing", "0").addElement("tr");
				// 加入子结点
				while (it.hasNext()) {
					Element child = (Element) it.next();
					tablebnt.addElement("td").addAttribute("style",
							"cursor:hand;background:#ececec").addAttribute(
							"onmouseover", "this.style.background='#FFFFFF'")
							.addAttribute("onmouseout",
									"this.style.background='#ececec'")
							.addAttribute(
									"onclick",
									"showlist('" + child.getName() + "',"
											+ nodeId + ")").setText(
									child.attributeValue("title"));
				}
			}
			// 加入子结点
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			SessionFactory.closeSession();
		}
		request.setAttribute("caption", ee.attributeValue("caption"));
		request.setAttribute("title", ee.attributeValue("title"));
		request.setAttribute("info", doc.getRootElement().asXML());
		return mapping.findForward("newviewchild");
	}
}