/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.info.card;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Iterator;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.hibernate.Session;

import com.mingda.common.ConstantDefine;
import com.mingda.common.SessionFactory;
import com.mingda.common.classtype.ClassHandle;
import com.mingda.common.node.TreeHandle;
import com.mingda.common.node.TreeHandleImpl;
import com.mingda.common.page.PageView;
import com.mingda.entity.SysTEmployee;

/**
 * MyEclipse Struts Creation date: 06-20-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 * @struts.action-forward name="familyinfocard"
 *                        path="/page/info/search/familyinfocard.jsp"
 */
public class FamilyinfocardAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@SuppressWarnings({ "rawtypes", "deprecation" })
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession httpsession = request.getSession();
		SysTEmployee employee = (SysTEmployee) httpsession
				.getAttribute("employee");
		Long empid = employee.getEmployeeId();
		String entityId = request.getParameter("entityId");
		if (entityId == null || entityId.equals("")) {
			entityId = (String) request.getAttribute("entityId");
		}
		Document dictionary = (Document) this.getServlet().getServletContext()
				.getAttribute("dictionary");

		Document treedoc = (Document) servlet.getServletContext().getAttribute(
				"tree");
		TreeHandle tree = new TreeHandleImpl(treedoc);

		PageView pv = new PageView();
		Document familybase = null;
		Document familyclass = null;
		Document curMember = null;
		String masterId = "";
		String mastername = "";
		ClassHandle ch = new ClassHandle();
		try {
			Document doc = tree
					.selectSingleEntity("FAMILY", new Long(entityId));
			masterId = doc.selectSingleNode("//property[@column='MASTERID']")
					.getText();
			mastername = doc.selectSingleNode(
					"//property[@column='MASTERNAME']").getText();
			familybase = pv.writeTablebyXML(doc, dictionary, 2);
			// 分类信息 调整

			// 计算成员分类
			tree.saveEntity(ch.getClassType(tree.selectEntities("MEMBERCLASS",
					new Long(masterId)), masterId, "MEMBERCLASS"), empid);
			//
			// 计算家庭分类

			familyclass = tree
					.selectEntities("FAMILYCLASS", new Long(entityId));
			familyclass = tree.saveEntity(ch.getClassType(familyclass,
					entityId, "FAMILYCLASS"), empid);
			familyclass = pv.writeTablebyXML(familyclass, dictionary, 1);
			// 计算家庭分类
			Iterator it = familyclass.getRootElement().elementIterator();
			while (it.hasNext()) {
				Element tr = (Element) it.next();
				Element td = (Element) tr.elements().get(1);
				if (td.getText().equals(ConstantDefine.CLASSSTATUS_NOCHN)) {
					familyclass.getRootElement().remove(tr);
				} else if (td.getText().equals(
						ConstantDefine.CLASSSTATUS_COMMITCHN)) {
					td.setText("");
					td.addElement("img").addAttribute("src",
							"/db/page/images/quest.gif").addAttribute("alt",
							"未确认");
				} else if (td.getText().equals(
						ConstantDefine.CLASSSTATUS_YESCHN)) {
					td.setText("");
					td.addElement("img").addAttribute("src",
							"/db/page/images/right.gif").addAttribute("alt",
							"已确认").addAttribute("onmouseover",
							"\"showclassinfo()\"");
				} else {
					familyclass.getRootElement().remove(tr);
				}
			}
			// 分类信息 调整
			// 家庭成员
			curMember = DocumentHelper.createDocument();
			Element root = curMember.addElement("tbody");
			Document member = pv.writeListbyXML(tree.selectEntities("MEMBER",
					new Long(entityId)), dictionary);
			it = member.getRootElement().elementIterator();
			int i = 0;
			while (it.hasNext()) {
				Element tr = (Element) it.next();
				if (i > 0) {
					Element curTr = root.addElement("tr");
					Element td = (Element) tr.elements().get(0);
					curTr.add((Element) td.clone());
					td = (Element) tr.elements().get(2);
					curTr.add((Element) td.clone());
				}
				i++;
			}
			// 家庭成员
		} catch (Exception e) {
			e.printStackTrace();
		}
		// 取受理中业务
		Document handle = DocumentHelper.createDocument();
		Document oper = DocumentHelper.createDocument();
		Session session = SessionFactory.getSession();
		Connection con = session.connection();
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sql = "";
		try {
			sql = "select po.name, "
					+ "  t.result, "
					+ "  fam.ensurecount, "
					+ " fam.population, "
					+ " fam.familyno, "
					+ " fam.organization_id, "
					+ " fam.mastername, "
					+ " fam.masterpaperid, "
					+ " fam.masterid, "
					+ " t.ifover "
					+ "from biz_t_optcheck t, doper_t_policy po, info_t_family fam "
					+ "where fam.family_id = t.family_id "
					+ "and t.policy_id = po.policy_id " + "and t.result='1' "
					+ "and t.family_id = '" + entityId + "'";
			ps = con.prepareStatement(sql);
			rs = ps.executeQuery();
			Element handleroot = handle.addElement("tbody");
			while (rs.next()) {
				Element tr = handleroot.addElement("tr");
				tr.addElement("td").setText(rs.getString("name"));
				String ifover = "";
				if (rs.getString("ifover").equals("5")) {
					ifover = "省级审批";
				} else if (rs.getString("ifover").equals("4")) {
					ifover = "市级审批";
				} else if (rs.getString("ifover").equals("3")) {
					ifover = "区县审批";
				} else if (rs.getString("ifover").equals("2")) {
					ifover = "街道审批";
				} else if (rs.getString("ifover").equals("1")) {
					ifover = "社区审批";
				} else {
				}
				tr.addElement("td").setText(ifover);
				tr.addElement("td").setText("详细");

			}
			if (handleroot.elements().isEmpty()) {
				Element tr = handleroot.addElement("tr");
				tr.addElement("td").setText("没有受理中业务");
			}
			sql = "select t.family_id, po.policy_id, t.money, po.name "
					+ " from biz_t_familystatus t, doper_t_policy po "
					+ " where po.policy_id = t.policy_id "
					+ " and t.flag = '2' " + " and t.family_id = '" + entityId
					+ "'";
			ps = con.prepareStatement(sql);
			rs = ps.executeQuery();
			Element operroot = oper.addElement("tbody");
			while (rs.next()) {
				Element tr = operroot.addElement("tr");
				tr.addElement("td").setText(rs.getString("name"));
				tr.addElement("td").setText(rs.getString("money"));
			}
			if (operroot.elements().isEmpty()) {
				Element tr = operroot.addElement("tr");
				tr.addElement("td").setText("没有正享受救助业务");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (ps != null) {
					ps.close();
				}
				if (con != null) {
					con.close();
				}
				SessionFactory.closeSession();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		// 取受理中业务
		request.setAttribute("familybase", familybase.getRootElement().asXML());
		request.setAttribute("familyclass", familyclass.getRootElement()
				.asXML());
		request.setAttribute("handle", handle.getRootElement().asXML());
		request.setAttribute("oper", oper.getRootElement().asXML());
		request.setAttribute("member", curMember.getRootElement().asXML());
		request.setAttribute("entityId", entityId);
		request.setAttribute("masterId", masterId);
		request.setAttribute("mastername", mastername);
		return mapping.findForward("familyinfocard");
	}
}