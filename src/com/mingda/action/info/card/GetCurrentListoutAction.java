/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.info.card;

import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.Node;

import com.mingda.common.SessionFactory;
import com.mingda.common.node.TreeHandle;
import com.mingda.common.node.TreeHandleImpl;
import com.mingda.common.page.PageView;

/**
 * MyEclipse Struts Creation date: 07-16-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class GetCurrentListoutAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@SuppressWarnings("rawtypes")
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String nodeName = request.getParameter("nodeName");
		String nodeId = request.getParameter("nodeId");
		Document dictionary = (Document) this.servlet.getServletContext()
				.getAttribute("dictionary");

		Document treedoc = (Document) servlet.getServletContext().getAttribute(
				"tree");
		TreeHandle tree = new TreeHandleImpl(treedoc);

		PageView pv = new PageView();
		Document doc = tree.selectEntities(nodeName, new Long(nodeId));
		try {
			if (nodeName.equals("PAPERS")) {
				List list = doc.getRootElement().selectNodes(
						"//" + nodeName + "/property[@column='URL']");
				doc = pv.writeListbyXML(doc, dictionary);
				Iterator it = doc.getRootElement().elementIterator();
				int i = 0;
				while (it.hasNext()) {
					Element tr = (Element) it.next();
					if (i == 0) {
						tr.addElement("th");
					} else {
						Node node = (Node) list.get(i - 1);
						String basePath = request.getScheme() + "://"
								+ request.getServerName() + ":"
								+ request.getServerPort() + "/upload/";
						tr.addElement("td").addElement("a").addAttribute(
								"href", basePath + node.getText())
								.setText("查看");
					}
					i++;
				}
				Element root = doc.getRootElement();
				Iterator it1 = root.elementIterator();
				while (it1.hasNext()) {
					Element tr = (Element) it1.next();
					Iterator tdit = tr.elementIterator();
					Element td = (Element) tdit.next();
					tr.remove(td);
				}
			} else if (nodeName.equals("ANNEX")) {
				List list = doc.getRootElement().selectNodes(
						"//" + nodeName + "/property[@column='URL']");
				doc = pv.writeListbyXML(doc, dictionary);
				Iterator it = doc.getRootElement().elementIterator();
				int i = 0;
				while (it.hasNext()) {
					Element tr = (Element) it.next();
					if (i == 0) {
						tr.addElement("th");
					} else {
						Node node = (Node) list.get(i - 1);
						String basePath = request.getScheme() + "://"
								+ request.getServerName() + ":"
								+ request.getServerPort() + "/upload/";
						tr.addElement("td").addElement("a").addAttribute(
								"href", basePath + node.getText())
								.setText("查看");
					}
					i++;
				}
				Element root = doc.getRootElement();
				Iterator it1 = root.elementIterator();
				while (it1.hasNext()) {
					Element tr = (Element) it1.next();
					Iterator tdit = tr.elementIterator();
					Element td = (Element) tdit.next();
					tr.remove(td);
				}
			} else if (nodeName.equals("FAMILYINCOME")) {
				doc = pv.writeListbyXML(doc, dictionary);
				Element root = doc.getRootElement();
				Iterator it = root.elementIterator();
				while (it.hasNext()) {
					Element tr = (Element) it.next();
					Iterator tdit = tr.elementIterator();
					Element td = (Element) tdit.next();
					tr.remove(td);
				}
			} else if (nodeName.equals("MEMBERINCOME")) {
				doc = pv.writeListbyXML(doc, dictionary);
				Element root = doc.getRootElement();
				Iterator it = root.elementIterator();
				while (it.hasNext()) {
					Element tr = (Element) it.next();
					Iterator tdit = tr.elementIterator();
					Element td = (Element) tdit.next();
					tr.remove(td);
				}
			} else if (nodeName.equals("PAYOUT")) {
				doc = pv.writeListbyXML(doc, dictionary);
				Element root = doc.getRootElement();
				Iterator it = root.elementIterator();
				while (it.hasNext()) {
					Element tr = (Element) it.next();
					Iterator tdit = tr.elementIterator();
					Element td = (Element) tdit.next();
					tr.remove(td);
				}
			} else {
				Document childdoc = tree.getChild(nodeName);
				Iterator childit = childdoc.getRootElement().elementIterator();
				String[] childtitles = new String[childdoc.getRootElement()
						.elements().size()];
				String[] childnames = new String[childdoc.getRootElement()
						.elements().size()];
				int i = 0;
				while (childit.hasNext()) {
					Element child = (Element) childit.next();
					childnames[i] = child.getName();
					childtitles[i] = child.attributeValue("title");
					i++;
				}

				String[] pks = new String[doc.getRootElement().elements()
						.size()];
				Iterator pkit = doc.getRootElement().elementIterator();
				int n = 0;
				while (pkit.hasNext()) {
					Element ele = (Element) pkit.next();
					Iterator it = ele.elementIterator();
					while (it.hasNext()) {
						Element element = (Element) it.next();
						if (element.attributeValue("isprimary") != null
								&& element.attributeValue("isprimary").equals(
										"true")) {
							pks[n] = element.getText();
						}
					}
					n++;
				}

				doc = pv.writeListbyXML(doc, dictionary);
				Element root = doc.getRootElement();
				Iterator it = root.elementIterator();
				int j = 0;
				while (it.hasNext()) {
					Element tr = (Element) it.next();
					if (j == 0) {
						for (int m = 0; m < childnames.length; m++) {
							tr.addElement("th").setText(childtitles[m]);
						}
					} else {
						for (int m = 0; m < childnames.length; m++) {
							tr.addElement("td").addElement("a").addAttribute(
									"href",
									"/db/page/info/card/getCurrentListout.do?nodeId="
											+ pks[j - 1] + "&nodeName="
											+ childnames[m]).addAttribute(
									"target", "_blank").setText("详细");
						}
					}
					Iterator tdit = tr.elementIterator();
					Element td = (Element) tdit.next();
					tr.remove(td);
					j++;
				}
			}
			String html = "<table width=\"650\" class=\"tablelist\" cellpadding=\"0\" cellspacing=\"0\" border=\"1\" bordercolordark=\"#ffffff\" bordercolorlight=\"#0066FF\">"
					+ doc.getRootElement().asXML() + "</table>";
			request.setAttribute("html", html);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			SessionFactory.closeSession();
		}
		return mapping.findForward("showchild");
	}
}