/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.info.card;

import java.util.Iterator;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

import com.mingda.common.SessionFactory;
import com.mingda.common.node.TreeHandle;
import com.mingda.common.node.TreeHandleImpl;
import com.mingda.common.page.PageView;

/**
 * MyEclipse Struts Creation date: 08-04-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 * @struts.action-forward name="newchildlist"
 *                        path="/page/info/card/newchildlist.jsp"
 */
public class NewchildlistAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@SuppressWarnings("rawtypes")
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String nodeName = request.getParameter("nodeName");
		String pid = request.getParameter("pid");

		Document dictionary = (Document) this.servlet.getServletContext()
				.getAttribute("dictionary");
		Document treedoc = (Document) servlet.getServletContext().getAttribute(
				"tree");

		TreeHandle tree = new TreeHandleImpl(treedoc);
		Document doc = tree.selectEntities(nodeName, new Long(pid));
		Element s = (Element) doc.getRootElement().selectSingleNode(
				"//" + nodeName);
		String title = s.attributeValue("title");
		PageView pv = new PageView();

		Document table = DocumentHelper.createDocument();
		Element tbody = table.addElement("tbody");
		Element firstrow = tbody.addElement("tr");
		Iterator it = doc.getRootElement().elementIterator();
		int i = 0;
		String pk = "";
		while (it.hasNext()) {
			Element tr = tbody.addElement("tr");
			Element entity = (Element) it.next();
			Iterator cit = entity.elementIterator();
			while (cit.hasNext()) {
				Element property = (Element) cit.next();
				if (property.attributeValue("isprimary") != null
						&& property.attributeValue("isprimary").equals("true")) {
					pk = property.getText();
				}
				if (property.attributeValue("islist") != null
						&& property.attributeValue("islist").equals("1")) {
					if (i == 0) {
						firstrow.addElement("th").addAttribute("height","25px").setText(
								property.attributeValue("title"));
					}
					String value = "";                             
					Element td = tr.addElement("td");
					if (property.attributeValue("dicsort") != null) {
						value = pv.getDictionartHandle().getDictsortToValue(
								dictionary, property.getText());
					} else {
						value = property.getText();
					}
					if(value==null||value.equals("")){
						
						value="未填写";
					}
					td.setText(value);
				}
			}
			if (i == 0) {
				firstrow.addElement("th").setText("查看");
			}
			tr.addElement("td").addAttribute("style", "cursor:hand;background:#ececec").addAttribute("onmouseover", "this.style.background='#FFFFFF'").addAttribute("onmouseout", "this.style.background='#ececec'").addAttribute("onclick","showlist('"+nodeName+"',"+pk+")").setText("详细");
			i++;
		}
		String info="";
		if(pk==null||pk.equals("")){
			info="没有填信息";
		}else{
			info=table.getRootElement().asXML();
		}
		request.setAttribute("caption", title);
		request.setAttribute("title", title);
		request.setAttribute("info", info);
		SessionFactory.closeSession();
		return mapping.findForward("newchildlist");
	}
}