/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.info.card;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.hibernate.Session;
import com.mingda.common.ConstantDefine;
import com.mingda.common.SessionFactory;
import com.mingda.common.classtype.ClassHandle;
import com.mingda.common.log4j.Log4jApp;
import com.mingda.common.node.TreeHandle;
import com.mingda.common.node.TreeHandleImpl;
import com.mingda.common.page.PageView;
import com.mingda.entity.SysTEmployee;

/**
 * MyEclipse Struts Creation date: 08-01-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 * @struts.action-forward name="newfamilyinfocard"
 *                        path="/page/info/card/newfamilyinfocard.jsp"
 */
public class NewfamilyinfocardAction1 extends Action {
	
	static Logger log = Logger.getLogger(NewfamilyinfocardAction1.class);
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@SuppressWarnings({ "unused", "rawtypes", "deprecation" })
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession httpsession = request.getSession();
		Session session = SessionFactory.getSession();
		SysTEmployee employee = (SysTEmployee) httpsession
				.getAttribute("employee");
		Long empid = employee.getEmployeeId();
		String entityId = request.getParameter("entityId");
		if (entityId == null || entityId.equals("")) {
			entityId = (String) request.getParameter("nodeId");
		}
		Document dictionary = (Document) this.getServlet().getServletContext()
				.getAttribute("dictionary");
		Document treedoc = (Document) servlet.getServletContext().getAttribute(
				"tree");
		TreeHandle tree = new TreeHandleImpl(treedoc);

		PageView pv = new PageView();
		Document familybase = null;
		Document familyclass = null;
		Document curMember = null; // 成员列表
		Document familyclassnew = null;// 分类列表
		String masterId = "";
		String mastername = "";
		String familycount = "";
		String familyincome = "";
		String countincome = "";
		String assetworth = "";
		String familyno="";
		Element opertd = null;
		Element fhandletd = null;
		String allpayout = "";
		ClassHandle ch = new ClassHandle();
		try {
			Document doc = tree
					.selectSingleEntity("FAMILY", new Long(entityId));
			familyno =doc.selectSingleNode("//property[@column='FAMILYNO']").getText().toString();
			masterId = doc.selectSingleNode("//property[@column='MASTERID']")
					.getText();
			mastername = doc.selectSingleNode(
					"//property[@column='MASTERNAME']").getText();
			familycount = doc.selectSingleNode(
					"//property[@column='POPULATION']").getText();
			if ("".equals(familycount) || null == familycount) {
				familycount = "未填写";
			}
			familyincome = doc.selectSingleNode(
					"//property[@column='CONSULTINCOME']").getText();
			if ("".equals(familycount) || null == familycount) {
				familycount = "未填写";
			}
			countincome = doc.selectSingleNode(
					"//property[@column='CONSULTINCOME']").getText();
			if ("".equals(familycount) || null == familycount) {
				countincome = "未填写";
			}
			assetworth = doc.selectSingleNode(
					"//property[@column='ASSETWORTH']").getText();
			if ("".equals(familycount) || null == familycount) {
				assetworth = "未填写";
			}
			allpayout = doc.selectSingleNode("//property[@column='ALLPAYOUT']")
					.getText();
			if ("".equals(familycount) || null == familycount) {
				allpayout = "未填写";
			}
			doc.selectSingleNode("//property[@column='ORGANIZATION_ID']")
					.setText(
							pv.getFullname(doc.selectSingleNode(
									"//property[@column='ORGANIZATION_ID']")
									.getText()));
			familybase = pv.writeTablebyXML(doc, dictionary, 3);
			// 分类信息 调整

			// 计算成员分类
			tree.saveEntity(ch.getClassType(tree.selectEntities("MEMBERCLASS",
					new Long(masterId)), masterId, "MEMBERCLASS"), empid);
			//
			// 计算家庭分类

			familyclass = tree
					.selectEntities("FAMILYCLASS", new Long(entityId));
			familyclass = tree.saveEntity(ch.getClassType(familyclass,
					entityId, "FAMILYCLASS"), empid);
			familyclass = pv.writeTablebyXML(familyclass, dictionary, 1);
			familyclassnew = DocumentHelper.createDocument();
			Element familyclassnewroot = familyclassnew.addElement("table")
					.addAttribute("border", "0").addAttribute("width", "100%")
					.addAttribute("cellspacing", "0").addAttribute(
							"cellpadding", "0").addAttribute("style",
							"border:0px");
			// 向家庭 加入分类空表格
			Element trnew = familybase.getRootElement().addElement("tr");
			Element qth = trnew.addElement("th");
			qth.setText("家庭分类");
			Element qtd = trnew.addElement("td").addAttribute("colspan", "5");
			// 加入表格
			Element fhandletr = familybase.getRootElement().addElement("tr");
			Element fhandleth = fhandletr.addElement("th");
			fhandleth.setText("受理中业务");
			fhandletd = fhandletr.addElement("td").addAttribute("colspan", "5");
			Element opertr = familybase.getRootElement().addElement("tr");
			Element operth = opertr.addElement("th");
			operth.setText("正享受业务");
			opertd = opertr.addElement("td").addAttribute("align","center").addAttribute("colspan", "5");
			if (familyclass.getRootElement().elements().isEmpty()) {
				familyclassnewroot.addElement("tr").addElement("td").setText(
						"无定义家庭分类");
			}
			// 计算家庭分类 colspan="2" rowspan="3" cellspacing="0" cellpadding="0"
			Iterator it = familyclass.getRootElement().elementIterator();
			int classi = 0;

			while (it.hasNext()) {
				if (classi % 3 == 0) {
					trnew = familyclassnewroot.addElement("tr");
				}
				Element tr = (Element) it.next();
				Element td = (Element) tr.elements().get(1);
				Element span = (Element) td.elements().get(0);// 分类值
				Element th = (Element) tr.elements().get(0);
				if (span.getText().equals(ConstantDefine.CLASSSTATUS_NOCHN)) {
					familyclass.getRootElement().remove(tr);
				} else if (span.getText().equals(
						ConstantDefine.CLASSSTATUS_COMMITCHN)) {
					td.remove(span);
					td.addAttribute("style",
							"border:0px;text-align:left;padding-left:5px")
							.addElement("span").addElement("img").addAttribute(
									"src", "/db/page/images/quest.gif")
							.addAttribute("alt", "未确认");
					td.addElement("span").setText(th.getText());
					// trnew.addElement("td").setText(th.getText());
					// trnew.addElement("td").setText(td.getText() +""+
					// th.getText());
					trnew.add((Element) td.clone());
					classi++;
				} else if (span.getText().equals(
						ConstantDefine.CLASSSTATUS_YESCHN)) {
					td.remove(span);
					td.addAttribute("style",
							"border:0px;text-align:left;padding-left:5px")
							.addElement("span").addElement("img").addAttribute(
									"src", "/db/page/images/right.gif")
							.addAttribute("alt", "已确认");
					td.addElement("span").setText(th.getText());
					// trnew.addElement("td").setText(td.getText() +""+
					// th.getText());
					trnew.add((Element) td.clone());
					classi++;
				} else {
					familyclass.getRootElement().remove(tr);
				}
			}
			if (familyclass.getRootElement().elements().isEmpty()) {
				familyclassnewroot.addElement("tr").addElement("td").setText(
						"无定义家庭分类");
			}
			/*for (int cut = 0; cut < classi % 3; cut++) {
				trnew.addElement("td").setText(" ");
				// trnew.addElement("td").setText(" ");
			}*/
			qtd.add((Element) familyclassnewroot.clone());
			// 分类信息 调整

			// 家庭成员类表
			Document memberchild = tree.getChild("MEMBER");// 成员表子结点
			Log4jApp.logger(memberchild.asXML());
			curMember = DocumentHelper.createDocument();
			// 表格样式
			Element root = curMember.addElement("table").addAttribute("width",
					"100%").addAttribute("cellpadding", "0").addAttribute(
					"cellspacing", "0");

			root.addElement("tr").addElement("td").addAttribute("height", "25")
					.addAttribute("background", "../../images/titmember.gif")
					.addAttribute("style", "padding-left:12px").setText("成员列表");

			Document memberlist = tree.selectEntities("MEMBER", new Long(
					entityId));
			Iterator memberlistit = memberlist.getRootElement()
					.elementIterator();
			int objid = 0;
			Long memberincome = null;

			while (memberlistit.hasNext()) {
				Element cap = root.addElement("tr").addElement("td")
						.addAttribute("height", "25");
				Element member = (Element) memberlistit.next();
				//log.debug(member.asXML());
				String membername = "";
				String relmaster = "";
				String paperid = "";
				String inch = "";
				String memberid = "";
				String sex = "";
				// BigDecimal big = null;
				int age = -1;
				// String healthstatus = "";
				// String deformitystatus = "";
				Iterator pit = member.elementIterator();
				while (pit.hasNext()) {
					Element property = (Element) pit.next();
					if (property.attributeValue("column").equals("MEMBERNAME")) {
						membername = property.getText();
					}
					if (property.attributeValue("column").equals("RELMASTER")) {
						relmaster = pv.getDictionartHandle()
								.getDictsortToValue(dictionary,
										property.getText());
					}
					if (property.attributeValue("column").equals("BIRTHDAY")
							&& !"".equals(property.getText())) {

						int year = new BigDecimal(property.getText().substring(
								0, 4)).intValue();
						int month = new BigDecimal(property.getText()
								.substring(5, 7)).intValue();
						int day = new BigDecimal(property.getText().substring(
								8, 10)).intValue();
						Calendar birthday = new GregorianCalendar(year, month,
								day);
						Calendar today = new GregorianCalendar();
						age = today.get(Calendar.YEAR)
								- birthday.get(Calendar.YEAR);
						// 取得周岁，即如果生日还没过，那么将年龄减1
						today.add(Calendar.YEAR, age);
						if (birthday.before(today)) {
							age--;
						}
						// log.debug("年龄为：" + age);

					}
					if (property.attributeValue("column").equals("PICPATH")) {
						inch = property.getText();
						if (null == inch || "".equals(inch)) {
							inch = "/db/page/images/nopic.gif";
						} else {
							inch = "/usr/upload/inch" + inch;
						}
					}
					if (property.attributeValue("column").equals("MEMBER_ID")) {
						memberid = property.getText();
					}
					if (property.attributeValue("column").equals("SEX")) {
						sex = pv.getDictionartHandle().getDictsortToValue(
								dictionary, property.getText());
					}
					/*
					 * if (property.attributeValue("column")
					 * .equals("HEALTHSTATUS")) { healthstatus =
					 * pv.getDictionartHandle() .getDictsortToValue(dictionary,
					 * property.getText()); } if
					 * (property.attributeValue("column").equals(
					 * "DEFORMITYSTATUS")) { deformitystatus =
					 * pv.getDictionartHandle() .getDictsortToValue(dictionary,
					 * property.getText()); }
					 */
					/*
					 * if (property.attributeValue("column")
					 * .equals("PERSONINCOME")) { String m = property.getText();
					 * if (null == m || "".equals(m)) {
					 * 
					 * } else { if (null == memberincome) { memberincome = new
					 * Long(0); } big = new BigDecimal(m); memberincome +=
					 * big.longValue(); } }
					 */
				}
				// 计算成员分类
				/*
				 * Document mclass = tree.selectEntities("MEMBERCLASS", new
				 * Long( memberid)); mclass =
				 * tree.saveEntity(ch.getClassType(mclass, memberid,
				 * "MEMBERCLASS"), empid); mclass = pv.writeTablebyXML(mclass,
				 * dictionary, 1); Document memberclassnew =
				 * DocumentHelper.createDocument(); Element memberclassnewroot =
				 * memberclassnew.addElement("table") .addAttribute("border",
				 * "0").addAttribute("width",
				 * "100%").addAttribute("cellspacing", "0")
				 * .addAttribute("cellpadding", "0").addAttribute("style",
				 * "border:0px"); Element mtrnew = null; // 计算成员分类 colspan="2"
				 * rowspan="3" cellspacing="0" // cellpadding="0" Iterator mit =
				 * mclass.getRootElement().elementIterator(); int mclassi = 0;
				 * while (mit.hasNext()) { if (mclassi % 2 == 0) { mtrnew =
				 * memberclassnewroot.addElement("tr"); } Element tr = (Element)
				 * mit.next(); Element td = (Element) tr.elements().get(1);
				 * Element th = (Element) tr.elements().get(0); Element span =
				 * (Element) td.elements().get(0);// 分类值 if
				 * (span.getText().equals(ConstantDefine.CLASSSTATUS_NOCHN)) {
				 * mclass.getRootElement().remove(tr); } else if
				 * (span.getText().equals(
				 * ConstantDefine.CLASSSTATUS_COMMITCHN)) { td.remove(span);
				 * td.addAttribute("style",
				 * "border:0px;text-align:left;padding-left:5px")
				 * .addElement("span").addElement("img") .addAttribute("src",
				 * "/db/page/images/quest.gif") .addAttribute("alt", "未确认");
				 * td.addElement("span").setText(th.getText());
				 * mtrnew.add((Element) td.clone()); classi++; } else if
				 * (span.getText().equals( ConstantDefine.CLASSSTATUS_YESCHN)) {
				 * td.remove(span); td.addAttribute("style",
				 * "border:0px;text-align:left;padding-left:5px")
				 * .addElement("span").addElement("img") .addAttribute("src",
				 * "/db/page/images/right.gif") .addAttribute("alt", "已确认");
				 * td.addElement("span").setText(th.getText());
				 * mtrnew.add((Element) td.clone()); mclassi++; } else {
				 * mclass.getRootElement().remove(tr); } } for (int cut = 0; cut
				 * < classi % 2; cut++) { mtrnew.addElement("td").setText(" ");
				 * }
				 */
				// 计算成员分类
				Element mcpatr = cap.addAttribute("bgcolor", "#FFFFFF")
						.addAttribute("style", "cursor:hand;padding-left:12px")
						.addAttribute("onmouseover",
								"this.style.background='#ececec'")
						.addAttribute("onmouseout",
								"this.style.background='#FFFFFF'")
						.addAttribute("onclick", "memberdis('" + objid + "')")
						.addElement("table").addAttribute("class", "table2")
						.addAttribute("border", "0").addAttribute("width",
								"100%").addAttribute("cellpadding", "0")
						.addAttribute("cellspacing", "0").addElement("tr");
				mcpatr.addElement("td").addAttribute("width", "60").setText(
						membername);
				if (-1 == age || "".equals(age)) {
					mcpatr.addElement("td").addAttribute("style",
							"color:#cccccc").addAttribute("width", "60")
							.setText("未填写");
				} else {
					mcpatr.addElement("td").addAttribute("width", "60")
							.setText(new Long(age).toString() + "周岁");
				}
				mcpatr.addElement("td").addAttribute("width", "60")
						.setText(sex);
				mcpatr.addElement("td").addAttribute("width", "60").setText(
						relmaster);
				/*
				 * mcpatr.addElement("td").addAttribute("width", "60").setText(
				 * healthstatus); mcpatr.addElement("td").addAttribute("width",
				 * "60").setText( deformitystatus);
				 */
				/*
				 * if (null == big) {
				 * mcpatr.addElement("td").addAttribute("align", "left")
				 * .setText("收入  未填写"); } else {
				 * mcpatr.addElement("td").addAttribute("align", "left")
				 * .setText("收入  " + big.toString() + "元"); }
				 */

				// 成员xml
				Element body = root.addElement("tr").addElement("td")
						.addAttribute("height", "25").addAttribute("id",
								"member" + objid).addAttribute("style",
								"display:none").addElement("table")
						.addAttribute("width", "100%").addAttribute(
								"cellpadding", "0").addAttribute("cellspacing",
								"0").addAttribute("class", "table1");

				Document tempmember = DocumentHelper.createDocument();

				tempmember.addElement("root").add((Element) member.clone());

				Document membertable = pv.writeTablebyXML(tempmember,
						dictionary, 2);
				// 添加成员分类到成员信息表格
				/*
				 * Element mqtr = membertable.getRootElement().addElement("tr");
				 * mqtr.addElement("th").setText("成员分类"); Element mqtd =
				 * mqtr.addElement("td").addAttribute("colspan", "3");
				 * mqtd.add((Element) memberclassnewroot.clone());
				 */
				//
				// 添加
				Long rowspan = new Long(membertable.getRootElement().elements()
						.size());

				Element firsttr = (Element) membertable.getRootElement()
						.elements().get(0);
				firsttr.addElement("td").addAttribute("width", "120px")
						.addAttribute("rowspan", rowspan.toString())
						.addAttribute("align", "center").addAttribute("class",
								"colField").addElement("img").addAttribute(
								"src",
								request.getScheme() + "://"
										+ request.getServerName() + ":"
										+ request.getServerPort() + inch)
						.addAttribute("width", "97").addAttribute("height",
								"133");
				Element butd = membertable.getRootElement().addElement("tr")
						.addElement("td").addAttribute("colspan", "5");
				// 加入子结点
				Iterator childit = memberchild.getRootElement()
						.elementIterator();
				Element tablebnt = butd.addElement("table").addAttribute(
						"border", "0").addAttribute("width", "100%")
						.addAttribute("cellpadding", "0").addAttribute(
								"cellspacing", "0").addElement("tr");
				while (childit.hasNext()) {
					Element child = (Element) childit.next();
					if (!child.getName().equals("MEMBERCLASS")) {
						tablebnt.addElement("td").addAttribute("style",
								"cursor:hand;background:#bfcfe7").addAttribute(
								"onmouseover",
								"this.style.background='#FFFFFF'")
								.addAttribute("onmouseout",
										"this.style.background='#bfcfe7'")
								.addAttribute(
										"onclick",
										"showlist('" + child.getName() + "',"
												+ memberid + ")").setText(
										child.attributeValue("title"));
					}
				}
				// 加入子结点
				body.add(membertable.getRootElement());

				objid++;
			}

			request.setAttribute("mcols", objid);// 成员数
			// 家庭成员
			// 家庭收入信息
			Document familyincomedoc = tree.selectEntities("FAMILYINCOME",
					new Long(entityId));
			/*
			 * Element tempincome = (Element) familyincomedoc.getRootElement()
			 * .elements().get(0); String t_m_income = ""; if (null ==
			 * memberincome) { } else { t_m_income = memberincome.toString(); }
			 * tempincome.addElement("property").addAttribute("title", "成员总收入")
			 * .addAttribute("type", "2").addAttribute("isvisible", "1")
			 * .addAttribute("status", "1").addAttribute("control", "1")
			 * .setText(t_m_income);
			 */
			request.setAttribute("familyincomecaption", "家庭收入  { 家庭总收入:"
					+ familyincome
					+ "元  参与计算总收入:"
					+ familyincome
					+ "元  人均收入："
					+ familyincomedoc.selectSingleNode(
							"//FAMILYINCOME/property[@column='AVGINCOME']")
							.getText() + "元 }");
			request.setAttribute("familyincome", pv.writeTablebyXML(
					familyincomedoc, dictionary, 2).getRootElement().asXML());
			// 家庭收入信息
			// 家庭支出信息
			Document familypayoutdoc = tree.selectEntities("PAYOUT", new Long(
					entityId));

			request.setAttribute("familypayoutcaption", "家庭支出    {" + allpayout
					+ "  元}");
			request.setAttribute("familypayout", pv.writeTablebyXML(
					familypayoutdoc, dictionary, 2).getRootElement().asXML());
			// 家庭支出信息
			// 家庭居住情况
			/*
			 * Document housingdoc = tree.selectEntities("HOUSING", new Long(
			 * entityId));
			 * 
			 * request.setAttribute("housingcaption", "家庭居住情况");
			 * request.setAttribute("housing", pv.writeTablebyXML(housingdoc,
			 * dictionary, 2).getRootElement().asXML());
			 */
			// 家庭居住情况
			// 家庭资产信息
			Document assets = tree.selectEntities("ASSET", new Long(entityId));
			request.setAttribute("asset", pv.writeTablebyXML(assets,
					dictionary, 1).asXML());
			/*
			 * String assetpk = tree.selectEntities("ASSET", new Long(entityId))
			 * .selectSingleNode("//property[@isprimary='true']") .getText(); if
			 * (assetpk != null) { Document asset =
			 * DocumentHelper.createDocument(); Element assetroot =
			 * asset.addElement("tbody");
			 * 
			 * Document assechild = tree.getChild("ASSET"); Iterator
			 * assetchildit = assechild.getRootElement() .elementIterator();
			 * while (assetchildit.hasNext()) { Element atype = (Element)
			 * assetchildit.next(); Element atypetr =
			 * assetroot.addElement("tr"); Element atypetd =
			 * atypetr.addElement("td"); Document atypelist =
			 * tree.selectEntities(atype.getName(), new Long(assetpk)); if
			 * (atype.getName().equals("ASSETHOUSE")) { } Iterator oneassetit =
			 * atypelist.getRootElement() .elementIterator(); int assetkingrows
			 * = 0; Element temptr = null;
			 * 
			 * while (oneassetit.hasNext()) { if (assetkingrows > 0) { temptr =
			 * assetroot.addElement("tr"); } else { temptr = atypetr; } Element
			 * one = (Element) oneassetit.next(); String txt = ""; String onepk
			 * = ""; if (atype.getName().equals("ASSETHOUSE")) { Iterator oneit
			 * = one.elementIterator(); while (oneit.hasNext()) { Element
			 * property = (Element) oneit.next();
			 * Log4jApp.logger(property.asXML()); if
			 * (property.attributeValue("column").equals( "PAPERID")) { txt +=
			 * property.attributeValue("title") + ":" + pv.getDictionartHandle()
			 * .getDictsortToValue( dictionary, property.getText()) + "  "; } if
			 * (property.attributeValue("column").equals( "BUILDTYPE")) { txt +=
			 * property.attributeValue("title") + ":" + pv.getDictionartHandle()
			 * .getDictsortToValue( dictionary, property.getText()) + "  "; } if
			 * (property.attributeValue("column").equals( "OWNERTYPE")) { txt +=
			 * property.attributeValue("title") + ":" + pv.getDictionartHandle()
			 * .getDictsortToValue( dictionary, property.getText()) + "  "; } if
			 * (property.attributeValue("column").equals( "WORTH")) { txt +=
			 * property.attributeValue("title") + ":" + property.getText() +
			 * "  "; } if (property.attribute("isprimary") != null &&
			 * property.attributeValue("isprimary") .equals("true")) { onepk =
			 * property.getText(); } }
			 * 
			 * } else if (atype.getName().equals("GROUND")) { Iterator oneit =
			 * one.elementIterator(); while (oneit.hasNext()) { Element property
			 * = (Element) oneit.next(); if
			 * (property.attributeValue("column").equals( "GROUNDTYPE")) { txt
			 * += property.attributeValue("title") + ":" +
			 * pv.getDictionartHandle() .getDictsortToValue( dictionary,
			 * property.getText()) + "  "; } if
			 * (property.attributeValue("column").equals( "AREAS")) { txt +=
			 * property.attributeValue("title") + ":" + pv.getDictionartHandle()
			 * .getDictsortToValue( dictionary, property.getText()) + "  "; } if
			 * (property.attributeValue("column").equals( "USEYEAR")) { txt +=
			 * property.attributeValue("title") + ":" + property.getText() +
			 * "  "; } if (property.attributeValue("column").equals( "WORTH")) {
			 * txt += property.attributeValue("title") + ":" +
			 * property.getText() + "  "; } if (property.attribute("isprimary")
			 * != null && property.attributeValue("isprimary") .equals("true"))
			 * { onepk = property.getText(); } }
			 * 
			 * } else if (atype.getName().equals("HOMEWORTH")) { Iterator oneit
			 * = one.elementIterator(); while (oneit.hasNext()) { Element
			 * property = (Element) oneit.next(); if
			 * (property.attributeValue("column").equals( "ITEMTYPE")) { txt +=
			 * property.attributeValue("title") + ":" + pv.getDictionartHandle()
			 * .getDictsortToValue( dictionary, property.getText()) + "  "; } if
			 * (property.attributeValue("column").equals( "NAMES")) { txt +=
			 * property.attributeValue("title") + ":" + pv.getDictionartHandle()
			 * .getDictsortToValue( dictionary, property.getText()) + "  "; } if
			 * (property.attributeValue("column").equals( "MODELS")) { txt +=
			 * property.attributeValue("title") + ":" + property.getText() +
			 * "  "; } if (property.attributeValue("column").equals( "WORTH")) {
			 * txt += property.attributeValue("title") + ":" +
			 * property.getText() + "  "; } if (property.attribute("isprimary")
			 * != null && property.attributeValue("isprimary") .equals("true"))
			 * { onepk = property.getText(); } } } else if
			 * (atype.getName().equals("PAPERWORTH")) { Iterator oneit =
			 * one.elementIterator(); while (oneit.hasNext()) { Element property
			 * = (Element) oneit.next(); if
			 * (property.attributeValue("column").equals( "PAPERTYPE")) { txt +=
			 * property.attributeValue("title") + ":" + pv.getDictionartHandle()
			 * .getDictsortToValue( dictionary, property.getText()) + "  "; } if
			 * (property.attributeValue("column").equals( "NAMES")) { txt +=
			 * property.attributeValue("title") + ":" + pv.getDictionartHandle()
			 * .getDictsortToValue( dictionary, property.getText()) + "  "; } if
			 * (property.attributeValue("column").equals( "WORTH")) { txt +=
			 * property.attributeValue("title") + ":" + property.getText() +
			 * "  "; } if (property.attribute("isprimary") != null &&
			 * property.attributeValue("isprimary") .equals("true")) { onepk =
			 * property.getText(); }
			 * 
			 * } } else if (atype.getName().equals("ANTIQUETREASURE")) {
			 * Iterator oneit = one.elementIterator(); while (oneit.hasNext()) {
			 * Element property = (Element) oneit.next(); if
			 * (property.attributeValue("column").equals( "TYPES")) { txt +=
			 * property.attributeValue("title") + ":" + pv.getDictionartHandle()
			 * .getDictsortToValue( dictionary, property.getText()) + "  "; } if
			 * (property.attributeValue("column").equals( "NAMES")) { txt +=
			 * property.attributeValue("title") + ":" + pv.getDictionartHandle()
			 * .getDictsortToValue( dictionary, property.getText()) + "  "; } if
			 * (property.attributeValue("column").equals( "WORTH")) { txt +=
			 * property.attributeValue("title") + ":" + property.getText() +
			 * "  "; } if (property.attribute("isprimary") != null &&
			 * property.attributeValue("isprimary") .equals("true")) { onepk =
			 * property.getText(); } } } else if
			 * (atype.getName().equals("TRAFFICTOOLS")) { Iterator oneit =
			 * one.elementIterator(); while (oneit.hasNext()) { Element property
			 * = (Element) oneit.next(); if
			 * (property.attributeValue("column").equals( "TYPES")) { txt +=
			 * property.attributeValue("title") + ":" + pv.getDictionartHandle()
			 * .getDictsortToValue( dictionary, property.getText()) + "  "; } if
			 * (property.attributeValue("column").equals( "NAMES")) { txt +=
			 * property.attributeValue("title") + ":" + pv.getDictionartHandle()
			 * .getDictsortToValue( dictionary, property.getText()) + "  "; } if
			 * (property.attributeValue("column").equals( "WORTH")) { txt +=
			 * property.attributeValue("title") + ":" + property.getText() +
			 * "  "; } if (property.attribute("isprimary") != null &&
			 * property.attributeValue("isprimary") .equals("true")) { onepk =
			 * property.getText(); } } } else if
			 * (atype.getName().equals("WORKTOOLS")) { Iterator oneit =
			 * one.elementIterator(); while (oneit.hasNext()) { Element property
			 * = (Element) oneit.next(); if
			 * (property.attributeValue("column").equals( "TYPES")) { txt +=
			 * property.attributeValue("title") + ":" + pv.getDictionartHandle()
			 * .getDictsortToValue( dictionary, property.getText()) + "  "; } if
			 * (property.attributeValue("column").equals( "NAMES")) { txt +=
			 * property.attributeValue("title") + ":" + pv.getDictionartHandle()
			 * .getDictsortToValue( dictionary, property.getText()) + "  "; } if
			 * (property.attributeValue("column").equals( "WORTH")) { txt +=
			 * property.attributeValue("title") + ":" + property.getText() +
			 * "  "; } if (property.attribute("isprimary") != null &&
			 * property.attributeValue("isprimary") .equals("true")) { onepk =
			 * property.getText(); } }
			 * 
			 * } else if (atype.getName().equals("WORTHNOTHING")) { Iterator
			 * oneit = one.elementIterator(); while (oneit.hasNext()) { Element
			 * property = (Element) oneit.next(); if
			 * (property.attributeValue("column").equals( "TYPES")) { txt +=
			 * property.attributeValue("title") + ":" + pv.getDictionartHandle()
			 * .getDictsortToValue( dictionary, property.getText()) + "  "; } if
			 * (property.attributeValue("column").equals( "NAMES")) { txt +=
			 * property.attributeValue("title") + ":" + pv.getDictionartHandle()
			 * .getDictsortToValue( dictionary, property.getText()) + "  "; } if
			 * (property.attributeValue("column").equals( "WORTH")) { txt +=
			 * property.attributeValue("title") + ":" + property.getText() +
			 * "  "; } if (property.attribute("isprimary") != null &&
			 * property.attributeValue("isprimary") .equals("true")) { onepk =
			 * property.getText(); } } } else { Iterator oneit =
			 * one.elementIterator(); while (oneit.hasNext()) { Element property
			 * = (Element) oneit.next(); if
			 * (property.attributeValue("column").equals( "TYPES")) { txt +=
			 * property.attributeValue("title") + ":" + pv.getDictionartHandle()
			 * .getDictsortToValue( dictionary, property.getText()) + "  "; } if
			 * (property.attributeValue("column").equals( "NAMES")) { txt +=
			 * property.attributeValue("title") + ":" + pv.getDictionartHandle()
			 * .getDictsortToValue( dictionary, property.getText()) + "  "; } if
			 * (property.attributeValue("column").equals( "WORTH")) { txt +=
			 * property.attributeValue("title") + ":" + property.getText() +
			 * "  "; } if (property.attribute("isprimary") != null &&
			 * property.attributeValue("isprimary") .equals("true")) { onepk =
			 * property.getText(); } } } if (onepk == null || onepk.equals(""))
			 * { assetroot.remove(temptr); } else {
			 * temptr.addElement("td").addAttribute("style",
			 * "text-align:left;padding-left:8px") .setText(txt);
			 * 
			 * temptr.addElement("td").addElement("a") .addAttribute( "href",
			 * "newviewchild.do?nodeId=" + onepk + "&nodeName=" +
			 * atype.getName()) .addAttribute("target", "_blank").setText(
			 * "详细");
			 * 
			 * temptr.addElement("td").addAttribute("style",
			 * "cursor:hand;background:#ececec") .addAttribute("onmouseover",
			 * "this.style.background='#FFFFFF'") .addAttribute("onmouseout",
			 * "this.style.background='#ececec'") .addAttribute( "onclick",
			 * "shownode('" + atype.getName() + "'," + onepk + ")")
			 * .setText("详细"); assetkingrows++; } }
			 * atypetd.addAttribute("rowspan", new
			 * Long(assetkingrows).toString()).setText(
			 * atype.attributeValue("title")); }
			 * Log4jApp.logger(assetroot.asXML()); request.setAttribute("asset",
			 * assetroot.asXML()); }
			 */
			request.setAttribute("assetcaption", "家庭资产  {评估总资产:" + assetworth
					+ " 元}");

			// 家庭资产信息
			// 家庭证件信息
			/*
			 * Document familypaperdoc = tree.selectEntities("PAPERS", new Long(
			 * entityId)); List list =
			 * familypaperdoc.getRootElement().selectNodes(
			 * "//PAPERS/property[@column='URL']"); List list1 =
			 * familypaperdoc.getRootElement().selectNodes(
			 * "//PAPERS/property[@column='TYPE']"); familypaperdoc =
			 * pv.writeListbyXML(familypaperdoc, dictionary); Iterator paperit =
			 * familypaperdoc.getRootElement() .elementIterator(); int i = 0;
			 * while (paperit.hasNext()) { Element tr = (Element)
			 * paperit.next(); if (i == 0) { tr.addElement("th"); } else { Node
			 * node = (Node) list.get(i - 1); Node node1 = (Node) list1.get(i -
			 * 1); if (node1.getText().equals("1")) { String realpath =
			 * request.getScheme() + "://" + request.getServerName() + ":" +
			 * request.getServerPort()
			 * +request.getContextPath()+"/viewpic.do?url="; String basePath =
			 * request.getScheme() + "://" + request.getServerName() + ":" +
			 * request.getServerPort() + "/upload/";
			 * tr.addElement("td").addElement("a").addAttribute( "href",realpath
			 * + basePath + node.getText()) .addAttribute("target",
			 * "_blank").setText("查看"); } else {
			 * tr.addElement("td").addElement("a").addAttribute( "href",
			 * "view.do?filename=" + node.getText()) .addAttribute("target",
			 * "_blank").setText("查看"); } } i++; } Element paperitroot =
			 * familypaperdoc.getRootElement(); if
			 * (!familypaperdoc.getRootElement().elements().isEmpty()) {
			 * paperitroot.remove((Element) familypaperdoc.getRootElement()
			 * .elements().get(0)); } Iterator it1 =
			 * paperitroot.elementIterator(); while (it1.hasNext()) { Element tr
			 * = (Element) it1.next(); Iterator tdit = tr.elementIterator();
			 * Element td = (Element) tdit.next(); tr.remove(td); } if
			 * (familypaperdoc.getRootElement().elements().isEmpty()) {
			 * request.setAttribute("paper", "无记录"); } else {
			 * request.setAttribute("paper", familypaperdoc.getRootElement()
			 * .asXML()); } request.setAttribute("papercaption", "家庭证件");
			 */
			// 家庭证件信息
			// 家庭多媒体资料
			/*
			 * Document familyannexdoc = tree.selectEntities("ANNEX", new Long(
			 * entityId)); List alist =
			 * familyannexdoc.getRootElement().selectNodes(
			 * "//ANNEX/property[@column='URL']"); List alist1 =
			 * familyannexdoc.getRootElement().selectNodes(
			 * "//ANNEX/property[@column='TYPE']"); familyannexdoc =
			 * pv.writeListbyXML(familyannexdoc, dictionary); Iterator annexit =
			 * familyannexdoc.getRootElement() .elementIterator(); int ii = 0;
			 * while (annexit.hasNext()) { Element tr = (Element)
			 * annexit.next(); if (ii == 0) { tr.addElement("th"); } else { Node
			 * node = (Node) alist.get(ii - 1); Node node1 = (Node)
			 * alist1.get(ii - 1); if (node1.getText().equals("1")) { String
			 * realpath = request.getScheme() + "://" + request.getServerName()
			 * + ":" + request.getServerPort()
			 * +request.getContextPath()+"/viewpic.do?url="; String basePath =
			 * request.getScheme() + "://" + request.getServerName() + ":" +
			 * request.getServerPort() + "/upload/";
			 * tr.addElement("td").addElement("a").addAttribute(
			 * "href",realpath+ basePath + node.getText())
			 * .addAttribute("target", "_blank").setText("查看"); } else {
			 * tr.addElement("td").addElement("a").addAttribute( "href",
			 * "view.do?filename=" + node.getText()) .addAttribute("target",
			 * "_blank").setText("查看"); } } ii++; } Element annexitroot =
			 * familyannexdoc.getRootElement(); if
			 * (!familyannexdoc.getRootElement().elements().isEmpty()) {
			 * annexitroot.remove((Element) familyannexdoc.getRootElement()
			 * .elements().get(0)); } Iterator ait1 =
			 * annexitroot.elementIterator(); while (ait1.hasNext()) { Element
			 * tr = (Element) ait1.next(); Iterator tdit = tr.elementIterator();
			 * Element td = (Element) tdit.next(); tr.remove(td); } if
			 * (familyannexdoc.getRootElement().elements().isEmpty()) {
			 * request.setAttribute("annex", "无记录"); } else {
			 * request.setAttribute("annex", familyannexdoc.getRootElement()
			 * .asXML()); } request.setAttribute("annexcaption", "家庭多媒体资料");
			 */
			// 家庭多媒体资料
		} catch (Exception e) {
			e.printStackTrace();
		}
		// 取受理中业务

		Document handle = DocumentHelper.createDocument();
		Document oper = DocumentHelper.createDocument();

		Connection con = session.connection();
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sql = "";
		try {
			sql = "select po.name, "
					+ " t.result, "
					+ " fam.ensurecount, "
					+ " fam.population, "
					+ " fam.familyno, "
					+ " fam.organization_id, "
					+ " fam.mastername, "
					+ " fam.masterpaperid, "
					+ " fam.masterid, "
					+ "  t.ifover ,t.policy_id "
					+ "from biz_t_optcheck t, doper_t_policy po, info_t_family fam "
					+ "where fam.family_id = t.family_id "
					+ "and t.policy_id =  po.policy_id "
					+ "and t.moneyflag<>'2' " + "and t.family_id = '"
					+ entityId + "'";
			ps = con.prepareStatement(sql);
			rs = ps.executeQuery();
			Element handleroot = handle.addElement("table").addAttribute(
					"border", "0").addAttribute("width", "100%").addAttribute(
					"cellspacing", "0").addAttribute("cellpadding", "0")
					.addAttribute("class", "table2");
			while (rs.next()) {
				Element tr = handleroot.addElement("tr");
				tr.addElement("td").setText(rs.getString("name"));
				String ifover = "";
				if (rs.getString("ifover").equals("1")) {
					ifover = "省级审批";
				} else if (rs.getString("ifover").equals("2")) {
					ifover = "市级审批";
				} else if (rs.getString("ifover").equals("3")) {
					ifover = "区县审批";
				} else if (rs.getString("ifover").equals("4")) {
					ifover = "街道审批";
				} else if (rs.getString("ifover").equals("5")) {
					ifover = "社区审批";
				} else {
				}
				tr.addElement("td").setText(ifover);
				tr.addElement("td").addElement("a").addAttribute(
						"href",
					"http://"+	request.getServerName()+":"+request.getServerPort()+request.getContextPath()+"/page/policy/approvalidea/policyideaflow.jsp?qfmids="
								+ entityId + "&qpid="
								+ rs.getString("policy_id")).addAttribute(
						"target", "_blank").setText("详细");
			}
			if (handleroot.elements().isEmpty()) {
				Element tr = handleroot.addElement("tr");
				tr.addElement("td").setText("没有受理中业务");
			}
			// log.debug(handleroot.asXML());
			if (null != handleroot) {
				fhandletd.add((Element) handleroot.clone());
			}

			sql = "select t.family_id, po.policy_id, t.money, po.name "
					+ " from		 biz_t_familystatus t, doper_t_policy po "
					+ " where po.policy_id =		  t.policy_id "
					+ " and t.flag = '2' " + " and t.family_id = '" + entityId
					+ "'";
			ps = con.prepareStatement(sql);
			rs = ps.executeQuery();
			Element operroot = oper.addElement("table").addAttribute("border",
					"0").addAttribute("width", "100%").addAttribute(
					"cellspacing", "0").addAttribute("cellpadding", "0")
					.addAttribute("class", "table2");
			while (rs.next()) {
				Element tr = operroot.addElement("tr");
				tr.addElement("td").setText(rs.getString("name"));
				if(null==rs.getString("money")||"".equals(rs.getString("money"))){
					tr.addElement("td").setText("");
				}else{
				tr.addElement("td").setText(rs.getString("money"));}
			}

			if (operroot.elements().isEmpty()) {
				Element tr = operroot.addElement("tr");
				tr.addElement("td").setText("没有正享受救助业务");
			}

			if (null != operroot) {
				opertd.add((Element) operroot.clone());
			}
			// 救助记录
			Document sallist = DocumentHelper.createDocument();
			Element handleroot1 = sallist.addElement("table").addAttribute(
					"border", "0").addAttribute("width", "100%").addAttribute(
					"cellspacing", "0").addAttribute("cellpadding", "0")
					.addAttribute("class", "table2");
			
			sql="select bill.*, mh.monname, mh.opttime  from impl_t_bill bill, impl_t_month mh where bill.family_id = '"+entityId+"' " +
					"and mh.organization_id = '"+familyno.substring(0, 6)+"'  and mh.month_id = bill.month_id and bill.orgno = '"+familyno.substring(0, 10)+"'";
			log.debug(sql);
			ps = con.prepareStatement(sql);
			rs = ps.executeQuery();
			while (rs.next()) {
				Element tr = handleroot1.addElement("tr");
				tr.addElement("td")
						.setText(
								rs.getString("monname").substring(0, 4)
										+ "年"
										+ rs.getString("monname").substring(4,
												6) + "月");
				tr.addElement("td").setText(rs.getString("money"));
				tr.addElement("td").addElement("a").addAttribute(
						"href",
						"http://"+	request.getServerName()+":"+request.getServerPort() +request.getContextPath()+"/page/implemention/querypolicybymonth.do?familyId="
								+ entityId + "&imonthId="
								+ rs.getString("month_id")).addAttribute(
						"target", "_blank").setText("详细");
			}
			/*
			 * Element tr = handleroot1.addElement("tr");
			 * tr.addElement("td").setText("笃笃笃");
			 * tr.addElement("td").setText("123123"+"元");
			 * tr.addElement("td").addElement("a").addAttribute( "href",
			 * "../../implemention/querypolicybymonth.do?familyId=" + entityId +
			 * "&imonthId=" + "123123").addAttribute( "target",
			 * "_blank").setText("详细");
			 */
			request.setAttribute("sallist", sallist.getRootElement().asXML());

			sql = "select * from info_t_annex annex where annex.target='INFO_T_FAMILY' and annex.relationid ='"
					+ entityId + "'";
			ps = con.prepareStatement(sql);
			rs = ps.executeQuery();
			String annexstr="";
			String path = request.getContextPath();
			String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";
			while (rs.next()) {
				annexstr =annexstr+"<tr><td>"+rs.getString("annexname")+"</td><td>"+rs.getString("remark")+"</td><td><a href=\""+basePath+"page/info/neweditor/annexbrowser.do?annexId="+rs.getString("annex_id")+"\" target=\"_blank\">浏览</a></td></tr>";
			}
			request.setAttribute("familyannexcaption","证明材料上传");
			request.setAttribute("familyannex", annexstr);
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (ps != null) {
					ps.close();
				}
				if (con != null) {
					con.close();
				}
				session.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		// 取受理中业务
		request.setAttribute("familybase", familybase.getRootElement().asXML());
		// request.setAttribute("handle", handle.getRootElement().asXML());
		// request.setAttribute("oper", oper.getRootElement().asXML());
		request.setAttribute("member", curMember.getRootElement().asXML());
		request.setAttribute("entityId", entityId);
		request.setAttribute("masterId", masterId);
		request.setAttribute("mastername", mastername);
		return mapping.findForward("newfamilyinfocard");
	}
}