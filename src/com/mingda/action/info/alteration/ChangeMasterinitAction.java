/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.info.alteration;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.dom4j.Document;
import org.hibernate.Session;
import org.hibernate.Transaction;

import com.mingda.common.SessionFactory;
import com.mingda.common.dictionary.DictionaryHandle;
import com.mingda.entity.InfoMember;
import com.mingda.entity.SysTDictionary;

/**
 * MyEclipse Struts Creation date: 07-11-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 * @struts.action-forward name="changemaster"
 *                        path="/page/info/alteration/changemaster.jsp"
 */
public class ChangeMasterinitAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@SuppressWarnings({ "rawtypes", "deprecation" })
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String nodeId = request.getParameter("nodeId");
		Document dictionary = (Document) this.servlet.getServletContext()
				.getAttribute("dictionary");

		// 取出户主关系
		DictionaryHandle dh = new DictionaryHandle();
		ArrayList dictarr = dh.getDictsortToArrayList(dictionary, "103");
		Iterator it = dictarr.iterator();
		SysTDictionary sysTDictionary1 = new SysTDictionary();
		while (it.hasNext()) {
			SysTDictionary sysTDictionary = new SysTDictionary();
			sysTDictionary = (SysTDictionary) it.next();
			if (sysTDictionary.getItem().equals("本人")) {
				sysTDictionary1 = sysTDictionary;
			}
		}
		dictarr.remove(sysTDictionary1);
		// // 取出户主关系
		ArrayList<InfoMember> list = new ArrayList<InfoMember>();
		InfoMember master = new InfoMember();
		Session session = SessionFactory.getSession();
		Transaction tx = session.beginTransaction();
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			conn = session.connection();
			String sql = "select * from info_t_member m where m.family_id ='"
					+ nodeId + "' order by m.relmaster ";
			ps = conn.prepareStatement(sql);
			rs = ps.executeQuery();
			while (rs.next()) {
				InfoMember member = new InfoMember();
				if ("112".equals(rs.getString("relmaster"))) {
					request.setAttribute("oldmemberId", rs
							.getString("member_id"));
					request.setAttribute("oldmembername", rs
							.getString("membername"));
					member.setOldmembername(rs.getString("membername"));
					member.setOldmemberpaperid(rs.getString("paperid"));
				}
				member.setFamilyId(rs.getLong("family_id"));
				member.setMemberId(rs.getLong("member_id"));
				member.setMembername(rs.getString("membername"));
				member.setRelmaster(rs.getLong("relmaster"));
				member.setPaperid(rs.getString("paperid"));
				member.setSex(dh.getDictsortToValue(dictionary, rs
						.getString("sex")));
				list.add(member);

			}
			tx.commit();
		} catch (SQLException e) {
			tx.rollback();
			e.printStackTrace();
		} finally {
			if (conn != null) {
				try {
					conn.close();
					ps.close();
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}

			}
			session.close();
		}
		request.setAttribute("famId", nodeId);
		request.setAttribute("master", master);
		request.setAttribute("list", list);
		request.setAttribute("relmaster", dictarr);
		return mapping.findForward("changemaster");
	}
}