/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.info.infolog;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.dom4j.Document;
import org.dom4j.Element;
import org.hibernate.Session;

import com.mingda.common.SessionFactory;
import com.mingda.common.log4j.Log4jApp;
import com.mingda.common.node.TreeHandle;
import com.mingda.common.node.TreeHandleImpl;
import com.mingda.common.page.PageView;

/**
 * MyEclipse Struts Creation date: 08-29-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class InfologviewAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String id = request.getParameter("id");
		String entityid = request.getParameter("entityid");
		String code = request.getParameter("code");
		// log.debug(id + " " + entityid + " " + code);
		Document tree = (Document) this.servlet.getServletContext()
				.getAttribute("tree");
		Document dictionary = (Document) this.servlet.getServletContext()
				.getAttribute("dictionary");
		TreeHandle th = new TreeHandleImpl(tree);
		Document logxml = th.getLogAsXML(new Long(id));
		// Log4jApp.logger(logxml.asXML());
		Element element = (Element) logxml.getRootElement().elements().get(0);
		Iterator u = element.elementIterator();
		String log = "";
		PageView pv = new PageView();
		while (u.hasNext()) {
			String dicsort = "";
			String oldvalue = "";
			String value = "";
			Element p = (Element) u.next();
			if ("1".equals(p.attributeValue("alter"))) {
				if (p.attribute("dicsort") != null) {
					dicsort = p.attributeValue("dicsort");
				}
				if (!dicsort.equals("")) {
					oldvalue = pv.getDictionartHandle().getDictsortToValue(
							dictionary, p.attributeValue("oldvalue"));
					value = pv.getDictionartHandle().getDictsortToValue(
							dictionary, p.getText());
				} else {
					oldvalue = p.attributeValue("oldvalue");
					value = p.getText();
				}
				log += "<tr><td width=\"120\">" + p.attributeValue("title")
						+ "</td><td>" + oldvalue + "</td><td>" + value
						+ "</td></tr>";

			}
		}
		Session session = SessionFactory.getSession();
		request.setAttribute("log", log);
		List<String> list = new ArrayList<String>();
		list = this.getParent(tree, code, list);
		int i = 0;
		Iterator<String> it = list.iterator();
		String sql = "";
		String iteminfo = "";
		String csql = "";
		while (it.hasNext()) {

			String b = (String) it.next();
			int idx = b.indexOf("$");
			String a = b.substring(0, idx);
			String tcode = b.substring(idx + 1, b.length());
			Log4jApp.logger(a.toString() + "    " + tcode);
			if (i == 0) {
				csql = a + "=" + entityid;
				a += "=" + entityid;

				Object o = (Object) session.createSQLQuery(csql).uniqueResult();
				Document t = th.selectSingleEntity(tcode, new Long(entityid));
				entityid = o.toString();
				Element te = (Element) t.selectSingleNode("//" + tcode);
				if (null == te.attributeValue("caption")
						|| "".equals(te.attributeValue("caption"))) {
					iteminfo = te.attributeValue("title") + " " + " " + " >> "
							+ iteminfo;
				} else {
					iteminfo = te.attributeValue("title") + " "
							+ te.attributeValue("caption") + " >> " + iteminfo;
				}
			} else {
				csql = a + "=" + entityid;
				Object o = (Object) session.createSQLQuery(csql).uniqueResult();
				Document t = th.selectSingleEntity(tcode, new Long(entityid));
				entityid = o.toString();
				Element te = (Element) t.selectSingleNode("//" + tcode);
				if (null == te.attributeValue("caption")
						|| "".equals(te.attributeValue("caption"))) {
					iteminfo = te.attributeValue("title") + " " + " " + " >> "
							+ iteminfo;
				} else {
					iteminfo = te.attributeValue("title") + " "
							+ te.attributeValue("caption") + " >> " + iteminfo;
				}
			}
			sql = "in (" + a + "  " + sql + ")";

			i++;
		}

		sql = "select INFO_T_FAMILY.FAMILY_ID ,INFO_T_FAMILY.ORGANIZATION_ID ,"
				+ "INFO_T_FAMILY.FAMILYNO ,INFO_T_FAMILY.MASTERNAME ,INFO_T_FAMILY.POPULATION"
				+ " from INFO_T_FAMILY where  FAMILY_ID " + sql + " ";
		Object[] o = (Object[]) session.createSQLQuery(sql).uniqueResult();

		String info = "";
		if (null != o) {

			info = "<td width=\"180\">家庭编号:<a target=\"blank\" href=\"/db/page/info/card/newfamilyinfocard.do?entityId="
					+ o[0]
					+ "\">"
					+ o[2]
					+ "</a></td>"
					+ "<td>户主姓名:"
					+ o[3]
					+ "</td>" + "<td>家庭人口:" + o[4] + "</td>";
		}
		request.setAttribute("info", info);
		request.setAttribute("title", iteminfo);
		return mapping.findForward("infologview");
	}

	private List<String> getParent(Document tree, String code, List<String> list) {
		String tablename = "";
		String pk = "";
		String fk = "";
		Element element = (Element) tree.selectSingleNode("//" + code);
		String tablecode = element.getName();
		Iterator eit = element.elementIterator();
		Log4jApp.logger("-----------------------------------");
		Log4jApp.logger(element.attributeValue("table"));
		tablename = element.attributeValue("table");
		while (eit.hasNext()) {
			Element ele = (Element) eit.next();
			if ("true".equals(ele.attributeValue("isforeign"))) {
				Log4jApp.logger(ele.attributeValue("column"));
				fk = ele.attributeValue("column");
			}
			if ("true".equals(ele.attributeValue("isprimary"))) {
				Log4jApp.logger(ele.attributeValue("column"));
				pk = ele.attributeValue("column");
			}
		}
		/*
		 * list.add(tablename + "," + tablename + "." + fk + "," + tablename +
		 * "." + pk);
		 */
		if (null == fk || "".equals(fk)) {
			fk = pk;
		}
		list.add(" select " + fk + " from " + tablename + " where  " + pk + "$"
				+ tablecode);
		if (!"FAMILY".equals(element.getName())) {
			Log4jApp.logger("-----------------------------------");
			Log4jApp.logger("-----------------------------------");
			Element parent = element.getParent();
			Log4jApp.logger(parent.attributeValue("table"));
			tablename = parent.attributeValue("table");
			tablecode = parent.getName();
			Iterator it = parent.elementIterator();
			while (it.hasNext()) {
				Element ele = (Element) it.next();
				if ("true".equals(ele.attributeValue("isforeign"))) {
					Log4jApp.logger(ele.attributeValue("column"));
					fk = ele.attributeValue("column");
				}
				if ("true".equals(ele.attributeValue("isprimary"))) {
					Log4jApp.logger(ele.attributeValue("column"));
					pk = ele.attributeValue("column");
				}
			}
			// list.add(tablename + "," + fk + "," + pk);
			Log4jApp.logger("-----------------------------------");
			Log4jApp.logger(parent.getName());
			if (!"FAMILY".equals(parent.getName())) {
				getParent(tree, parent.getName(), list);
			} else {
				list.add(" select " + fk + " from " + tablename + " where  "
						+ pk + "$" + tablecode);
			}
		}
		return list;
	}
}