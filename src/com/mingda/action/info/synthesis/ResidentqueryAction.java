/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.info.synthesis;

import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.dom4j.Document;
import org.dom4j.Element;
import org.hibernate.Session;
import org.hibernate.Transaction;

import com.mingda.common.Pager;
import com.mingda.common.SessionFactory;
import com.mingda.common.page.PageView;

/**
 * MyEclipse Struts Creation date: 12-16-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class ResidentqueryAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	static Logger log = Logger.getLogger(ResidentqueryAction.class);

	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession hsession = request.getSession();

		String o = request.getParameter("o");
		String sql = request.getParameter("sql");
		if (null == sql || "".equals(sql)) {
			sql = (String) hsession.getAttribute("orgsql");
		} else {
			if ("1".equals(o)) {

			} else {
				try {
					sql = new String(sql.getBytes("8859_1"), "GB18030");
				} catch (UnsupportedEncodingException e) {
					e.printStackTrace();
				}
			}

			hsession.setAttribute("orgsql", sql);
		}
		String type = "";
		String value = "";
		String join = "";
		String order = "";
		String radio = "";
		String rd = "";
		String clzpara = "";

		int zhs = 0;
		int zrs = 0;

		value = request.getParameter("value");
		type = request.getParameter("term");
		join = request.getParameter("join");
		order = request.getParameter("order");
		radio = request.getParameter("radio");
		rd = request.getParameter("type1");
		// log.debug(" 显示方式   "+rd);
		clzpara = request.getParameter("clz");

		if (null == o || "".equals(o)) {
			try {
				if (null != value && !"".equals("value")) {
					value = new String(value.getBytes("iso-8859-1"), "gb18030");
				}
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
		}
		// application xml
		Document dictionary = (Document) this.servlet.getServletContext()
				.getAttribute("dictionary");
		Document tree = (Document) this.servlet.getServletContext()
				.getAttribute("tree");

		// 取分类字段信息
		List<Element> clzs = tree.selectNodes("//FAMILYCLASS/property");
		Iterator<Element> itclzs = clzs.iterator();
		ArrayList<String> clzscolumns = new ArrayList<String>();
		String sqlclz = "";
		/*
		 * while (itclzs.hasNext()) { Element clz = itclzs.next(); if
		 * ("0".equals(clz.attributeValue("status"))) { itclzs.remove(); } else
		 * { if ("true".equals(clz.attributeValue("isprimary"))) {
		 * itclzs.remove(); } else if
		 * ("true".equals(clz.attributeValue("isforeign"))) { itclzs.remove(); }
		 * else { clzscolumns.add(clz.attributeValue("column")); sqlclz = sqlclz
		 * + "," + clz.attributeValue("column"); } } }
		 */
		// clzscolumns.add("CLASSTYPE860");
		// clzscolumns.add("CLASSTYPE861");
		// clzscolumns.add("CLASSTYPE862");
		// clzscolumns.add("CLASSTYPE863");
		// clzscolumns.add("CLASSTYPE864");
		// clzscolumns.add("CLASSTYPE865");
		// sqlclz=", cl. classtype860,cl.classtype861,cl. classtype862, cl. classtype863 , cl. classtype864,cl. classtype865";
		int mm = clzscolumns.size();

		String hsql = "";
		String sqlcol = sql.substring(sql.indexOf("select") + 6,
				sql.indexOf("from")).trim();
		// 分类改
		String[] sqlcols = sqlcol.split(",");
		String[] cols = new String[sqlcols.length + mm];
		for (int q = 0; q < cols.length; q++) {
			if (q < cols.length - clzscolumns.size()) {
				cols[q] = sqlcols[q];
			} else {
				cols[q] = "INFO_T_FAMILYCLASS."
						+ clzscolumns.get(q - sqlcols.length);
			}
		}
		//
		String formxml = "<input name=\"type1\" value=\""
				+ rd
				+ "\" type=\"hidden\"/>查询项:<select id=\"type\" name=\"term\" onchange=\"check(this)\"><option value=\"\">未选择...</option>";
		String orderxml = "排序:<select id=\"type\" name=\"order\"><option value=\"\">未选择...</option>";
		String thead = "";
		String dictsort2 = "";
		PageView pv = new PageView();
		String vhtml = "<input type=\"text\" name=\"value\"/>";
		String clzhtml = "";

		Map<String, String> mapcol = new HashMap<String, String>();
		ArrayList<String> alist = new ArrayList<String>();
		ArrayList<String> blist = new ArrayList<String>();
		for (int i = 0; i < cols.length; i++) {
			String[] p = cols[i].replace(".", ",").split(",");
			String tablename = p[0].substring(p[0].indexOf("_T_") + 3);
			String property = p[1];
			Element ele = (Element) tree.selectSingleNode("//" + tablename
					+ "/property[@column='" + property + "']");
			if (null != ele) {
				if (null == ele.attributeValue("isprimary")
						&& null == ele.attributeValue("isforeign")) {
					if ("ORGANIZATION_ID".equals(ele.attributeValue("column"))) {

					} else {
						String dicsort = "";
						if (null != ele.attributeValue("dicsort")) {
							dicsort = ele.attributeValue("dicsort");
						}

						alist.add(property);
						if ("FAMILYCLASS".equals(ele.getParent().getName())) {
							blist.add(ele.attributeValue("title") + ","
									+ dicsort + ",clz");
							mapcol.put(property, ele.attributeValue("title")
									+ "," + dicsort + ",clz");
							clzhtml = clzhtml + "<option value=\"" + property
									+ "\">" + ele.attributeValue("title")
									+ "</option>";
						} else {
							blist.add(ele.attributeValue("title") + ","
									+ dicsort + ",noclz");
							mapcol.put(property, ele.attributeValue("title")
									+ "," + dicsort + ",noclz");
						}

						String v = ele.getParent().getName() + "_" + property;
						// 0000000000000000000000000000000000000000000000000000000000
						if (v.equals(type)) {
							formxml = formxml + "<option selected value=\""
									+ ele.getParent().getName() + "_"
									+ property + "\">"
									+ ele.attributeValue("title") + "</option>";
							dictsort2 = dicsort;
							if (!"".equals(dictsort2)
									&& type.equals(ele.getParent().getName()
											+ "_" + property)) {
								vhtml = "<select name=\"value\">"
										+ pv.getDictionartHandle()
												.getDictsortToOption(
														dictionary, dictsort2,
														value) + "</select>";
							} else {
								vhtml = "<input type=\"text\" name=\"value\" value=\""
										+ value + "\"/>";
							}
						} else {
							formxml = formxml + "<option value=\""
									+ ele.getParent().getName() + "_"
									+ property + "\">"
									+ ele.attributeValue("title") + "</option>";
						}
						// 0000000000000000000000000000000000000000000000000000000000
						if (v.equals(order)) {
							orderxml = orderxml + "<option selected value=\""
									+ ele.getParent().getName() + "_"
									+ property + "\">"
									+ ele.attributeValue("title") + "</option>";
						} else {
							orderxml = orderxml + "<option value=\""
									+ ele.getParent().getName() + "_"
									+ property + "\">"
									+ ele.attributeValue("title") + "</option>";
						}
						// 0000000000000000000000000000000000000000000000000000000000
					}
				}
			} else {
				mapcol.put(property, "所属,,noclz");
				alist.add(property);
				blist.add("所属,,noclz");
			}
		}
		String opt = "";
		if ("=".equals(join)) {
			opt = "<option selected  value=\"=\">等于</option>"
					+ "<option value=\"<>\">不等于</option>"
					+ "<option value=\"like\">相似</option>"
					+ "<option value=\">\">大于</option>"
					+ "<option  value=\"<\">小于</option>";
		} else if ("<>".equals(join)) {
			opt = "<option  value=\"=\">等于</option>"
					+ "<option selected value=\"<>\">不等于</option>"
					+ "<option value=\"like\">相似</option>"
					+ "<option value=\">\">大于</option>"
					+ "<option  value=\"<\">小于</option>";
		} else if ("like".equals(join)) {
			opt = "<option  value=\"=\">等于</option>"
					+ "<option value=\"<>\">不等于</option>"
					+ "<option selected value=\"like\">相似</option>"
					+ "<option value=\">\">大于</option>"
					+ "<option  value=\"<\">小于</option>";
		} else if (">".equals(join)) {
			opt = "<option  value=\"=\">等于</option>"
					+ "<option value=\"<>\">不等于</option>"
					+ "<option  value=\"like\">相似</option>"
					+ "<option selected value=\">\">大于</option>"
					+ "<option  value=\"<\">小于</option>";
		} else if ("<".equals(join)) {
			opt = "<option  value=\"=\">等于</option>"
					+ "<option value=\"<>\">不等于</option>"
					+ "<option value=\"like\">相似</option>"
					+ "<option value=\">\">大于</option>"
					+ "<option selected value=\"<\">小于</option>";
		} else {
			opt = "<option  value=\"=\">等于</option>"
					+ "<option value=\"<>\">不等于</option>"
					+ "<option value=\"like\">相似</option>"
					+ "<option value=\">\">大于</option>"
					+ "<option value=\"<\">小于</option>";
		}
		String selected1 = " ";
		String selected2 = " ";
		String selected3 = " ";
		String selected4 = " ";
		String selected5 = " ";
		String selected6 = " ";
		String selected7 = " ";
		if ("876".equals(clzpara)) {
			selected1 = "selected =\"selected\"";
		} else if ("877".equals(clzpara)) {
			selected2 = "selected =\"selected\"";
		} else if ("878".equals(clzpara)) {
			selected3 = "selected =\"selected\"";
		} else if ("873".equals(clzpara)) {
			selected4 = "selected =\"selected\"";
		} else if ("874".equals(clzpara)) {
			selected5 = "selected =\"selected\"";
		} else if ("875".equals(clzpara)) {
			selected6 = "selected =\"selected\"";
		} else if ("879".equals(clzpara)) {
			selected7 = "selected =\"selected\"";
		}
		formxml = formxml
				+ "</select>&nbsp;&nbsp;运算符:<select id=\"join\" name=\"join\">"
				+ opt
				+ "</select>&nbsp;&nbsp;查询值:"
				+ "<span id =\"value\">"
				+ vhtml
				+ "</span> &nbsp;&nbsp;保障类型: <select name=\"clz\"><option value=\"\">全部</option>"
				+ "<option " + selected1 + " value=\"876\">重点户一档</option>"
				+ "<option " + selected2 + " value=\"877\">重点户二档</option>"
				+ "<option " + selected3 + " value=\"878\">重点户三档</option>"
				+ "<option " + selected4 + " value=\"873\">一般户一档</option>"
				+ "<option " + selected5 + " value=\"874\">一般户二档</option>"
				+ "<option " + selected6 + " value=\"875\">一般户三档</option>"
				+ "<option " + selected7 + " value=\"879\">无保障类型</option>"
				+ "</select>";
		String radioxml = "";
		if ("asc".equals(radio)) {
			radioxml = "升序<input type=\"radio\" CHECKED name=\"radio\" value =\"asc\" onclick=\"vieworder()\"/>降序<input type=\"radio\" name=\"radio\" value =\"desc\" onclick=\"vieworder()\"/>";
		} else if ("desc".equals(radio)) {
			radioxml = "升序<input type=\"radio\" name=\"radio\" value =\"asc\" onclick=\"vieworder()\"/>降序<input type=\"radio\" name=\"radio\" CHECKED value =\"desc\" onclick=\"vieworder()\"/>";
		} else {
			radioxml = "升序<input type=\"radio\" name=\"radio\" value =\"asc\" onclick=\"vieworder()\"/>降序<input type=\"radio\" name=\"radio\" value =\"desc\" onclick=\"vieworder()\"/>";
		}
		orderxml = orderxml + "</select>&nbsp;";
		request.setAttribute("orderxml", orderxml);
		request.setAttribute("formxml", formxml);
		request.setAttribute("radioxml", radioxml);
		Session session = SessionFactory.getSession();
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String curpage = request.getParameter("cur_page");
		Transaction tx = session.beginTransaction();
		try {
			conn = session.connection();
			int totalrow = 0;
			Pager page = null;
			if (curpage == null || curpage.equals("")) {
				String value1 = "";
				if ("like".equals(join)) {
					value1 = "'%" + value + "%'";
				} else {
					if ("".equals(value)) {
						if ("<>".equals(join)) {
							join = " is not null";
						} else if ("=".equals(join)) {
							join = " is null";
						}

					} else {
						value1 = "'" + value + "'";
					}
				}
				if (null == type || "".equals(type)) {

					String orderstr = "order by m.familyno";
					if (null == radio || "".equals(radio) || null == order
							|| "".equals(order)) {

					} else {
						orderstr = "  order by " + order.split("_")[1] + "  "
								+ radio;
					}

					if ("".equals(clzpara) || null == clzpara
							|| "null".equals(clzpara)) {

						clzpara = "";
					} else {
						clzpara = "  and m.dessaltype =   " + clzpara;
					}
					// , cl. classtype860,cl.classtype861,cl. classtype862, cl.
					// classtype863 , cl. classtype864,cl. classtype865
					//SYS_T_ORGANIZATION.FULLNAME
					sql= sql.replace("SYS_T_ORGANIZATION.FULLNAME", " info_t_family.consultincome,SYS_T_ORGANIZATION.FULLNAME");					
					hsql = "select  m.*  " + sqlclz
							+ "  from  info_t_familyclass  cl, ( " + sql
							+ " ) m where m.family_id = cl.family_id(+) "
							+ clzpara + orderstr;
				} else {
					String orderstr = "";
					if (null == radio || "".equals(radio) || null == order
							|| "".equals(order)) {

					} else {
						orderstr = "  order by " + order.split("_")[1] + "  "
								+ radio;
					}
					if ("".equals(clzpara) || null == clzpara
							|| "null".equals(clzpara)) {

						clzpara = "";
					} else {
						clzpara = "  and m.dessaltype =   " + clzpara;
					}
					// , cl. classtype860,cl.classtype861,cl. classtype862, cl.
					// classtype863 , cl. classtype864,cl. classtype865
					hsql = "select m.*  " + sqlclz
							+ "  from  info_t_familyclass  cl,  ( " + sql
							+ " ) m where m.family_id = cl.family_id(+) and m."
							+ type.split("_")[1] + " " + join + " " + value1
							+ clzpara + orderstr;
				}
				if ("rdf".equals(rd)) {
					String csql = "";

					csql = "select count(1) , sum(population) from ( " + hsql
							+ " )";
					pstmt = conn.prepareStatement(csql);
					rs = pstmt.executeQuery();
					if (rs.next()) {
						zhs = rs.getInt(1);
						zrs = rs.getInt(2);
					}
					// log.debug(csql);
				}
				pstmt = conn.prepareStatement("select count(1) from ( " + hsql
						+ " )");
				log.error("查询语句:" + hsql);
				log.debug(hsql);;
				hsession.setAttribute("sql", hsql);
				rs = pstmt.executeQuery();
				if (rs.next()) {
					totalrow = rs.getInt(1);
					if ("rdm".equals(rd)) {
						zhs = totalrow;
						zrs = totalrow;
					}
				}
				page = new Pager(totalrow, new Long(1).intValue(), "0");
				pstmt = conn
						.prepareStatement("select * from (select mytab.*, rownum row_num from ("
								+ hsql
								+ ") mytab) where row_num between "
								+ page.getBeiginrow()
								+ " and "
								+ page.getEndrow());
				rs = pstmt.executeQuery();
				HashMap colss = null;
				if ("rdf".equals(rd)) {
					colss=new HashMap();
					colss.put(3, "证件号码");
					colss.put(1, "家庭编号");
					colss.put(2, "户主姓名");
					colss.put(4, "保障人口");
					colss.put(5, "保障金额");
					colss.put(8, "家庭收入");
					colss.put(9, "所属");
					hsession.setAttribute("cols", colss);
				}
				if ("rdm".equals(rd)) {
					colss=new HashMap();
					colss.put(3, "证件号码");
					colss.put(1, "家庭编号");
					colss.put(2, "姓名");
					colss.put(4, "与户主关系,dictval");
					colss.put(5, "保障类型,dictval");
					colss.put(7, "所属");
					hsession.setAttribute("cols", colss);
				}
			} else {
				hsql = (String) hsession.getAttribute("sql");
				if ("rdf".equals(rd)) {
					String csql = "";
					csql = "select count(1) , sum(population)  from ( " + hsql
							+ " )";
					pstmt = conn.prepareStatement(csql);
					// log.debug(csql);
					rs = pstmt.executeQuery();
					if (rs.next()) {
						zhs = rs.getInt(1);
						zrs = rs.getInt(2);
					}
				}
				pstmt = conn.prepareStatement("select count(1) from ( " + hsql
						+ " )");
				rs = pstmt.executeQuery();
				if (rs.next()) {
					totalrow = rs.getInt(1);
					if ("rdm".equals(rd)) {
						zhs = totalrow;
						zrs = totalrow;
					}
				}
				page = new Pager(totalrow, new Long(curpage).intValue(), "0");
				pstmt = conn
						.prepareStatement("select * from (select mytab.*, rownum row_num from ("
								+ hsql
								+ ") mytab) where row_num between "
								+ page.getBeiginrow()
								+ " and "
								+ page.getEndrow());
				rs = pstmt.executeQuery();
			}
			String value1 = "";
			if (value == null || value.equals("")) {
				value = "";
				join = "";
				type = "";
				order = "";
			} else {
				value1 = java.net.URLEncoder.encode(value);
			}
			page.setUrl("residentquery.do?term=" + type + "&join=" + join
					+ "&value=" + value1 + "&order=" + order + "&radio="
					+ radio + "&type1=" + rd);
			String html = "";
			/*
			 * for (Iterator<String> it = mapcol.keySet().iterator();
			 * it.hasNext();) { String key = (String) it.next(); thead = "<th>"
			 * + mapcol.get(key).toString().split(",")[0] + "</th>" + thead; }
			 */
			for (int a = 0; a < alist.size(); a++) {
				if ("clz".equals(blist.get(a).toString().split(",")[2])) {

				} else {
					thead = thead + "<th>"
							+ blist.get(a).toString().split(",")[0] + "</th>";
				}
			}
			// thead = thead + "<th>保障类型</th>";
			while (rs.next()) {
				String temp = "";
				String clzstr = "";
				/*
				 * for (Iterator<String> it = mapcol.keySet().iterator(); it
				 * .hasNext();) {
				 */
				for (int a = alist.size() - 1; a >= 0; a--) {
					String key = (String) alist.get(a);
					String key1 = (String) blist.get(a);
					String s1 = key1.split(",")[0];
					String s2 = key1.split(",")[1];
					String s3 = key1.split(",")[2];

					if ("".equals(s2) && "noclz".equals(s3)) {
						String fid = rs.getString("FAMILY_ID");
						if ("FAMILYNO".equals(key)) {
							temp = "<td><a style=\"text-decoration:none\" href=\"/db/page/info/card/newfamilyinfocard.do?entityId="
									+ fid
									+ "\" target=\"_blank\">"
									+ rs.getString(key) + "</a></td>" + temp;
						} else if ("MASTERNAME".equals(key)) {
							temp = "<td><a style=\"text-decoration:none\" href=\"/db/page/info/card/newfamilyinfocard.do?entityId="
									+ fid
									+ "\" target=\"_blank\">"
									+ rs.getString(key) + "</a></td>" + temp;
						} else if ("MEMBERNAME".equals(key)) {
							temp = "<td><a style=\"text-decoration:none\" href=\"/db/page/info/card/newfamilyinfocard.do?entityId="
									+ fid
									+ "\" target=\"_blank\">"
									+ rs.getString(key) + "</a></td>" + temp;
						} else {
							temp = "<td>" + rs.getString(key) + "</td>" + temp;
						}
					} else if (!"".equals(s2) && "noclz".equals(s3)) {
						temp = "<td>"
								+ pv.getDictionartHandle().getDictsortToValue(
										dictionary, rs.getString(key))
								+ "</td>" + temp;
					} else if ("clz".equals(s3)) {
						/*
						 * if("280".equals(rs.getString(key))||"282".equals(rs.
						 * getString(key))) { String font="";
						 * if("280".equals(rs.getString(key))){ font
						 * ="(<FONT COLOR=\"#green\" >已确认</FONT>)"; }else if
						 * ("282".equals(rs.getString(key))){ font
						 * ="(<FONT COLOR=\"#ff00000\">未确认</FONT>)"; }else{
						 * 
						 * } clzstr = "" + s1+" " +font+ " " + clzstr; }
						 */
					}
				}
				html = html + "<tr>" + temp + /*
											 * "<td> " + clzstr + "</td> " +
											 */"</tr>";
			}
			if ("rdf".equals(rd)) {

				request.setAttribute("tr", "总户数:" + zhs + "  总人数:" + zrs);
			} else {
				request.setAttribute("tr", "总人数:" + zrs);
			}
			request.setAttribute("thead", thead);
			request.setAttribute("html", html);
			request.setAttribute("toolsmenu", page.getToolsMenu());
		
			request.setAttribute("sql", sql);
			tx.commit();
		} catch (SQLException e) {
			tx.rollback();
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (pstmt != null) {
					pstmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
			session.close();
		}
		return mapping.findForward("residentquery");
	}
}