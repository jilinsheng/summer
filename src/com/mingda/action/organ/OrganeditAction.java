/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.organ;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Session;
import org.hibernate.Transaction;

import com.mingda.common.SessionFactory;
import com.mingda.common.organ.OrganEditHandle;
import com.mingda.entity.SysTEmployee;

/**
 * MyEclipse Struts Creation date: 12-02-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class OrganeditAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession hsession = request.getSession();
		SysTEmployee employee = (SysTEmployee) hsession
				.getAttribute("employee");
		Session session = SessionFactory.getSession();
		String corg = request.getParameter("corg");
		String ids = request.getParameter("ids");
		Transaction tx = session.beginTransaction();
		OrganEditHandle o = new OrganEditHandle();
		try {
			if (null != ids) {
				String temp = "";
				List<String[]> blist = o.getOrganInfo(ids + "," + corg);
				String[] orgids = ids.split(",");
				if (null != corg && !"".equals(corg)) {
					for (int i = 0; i < orgids.length; i++) {
						if (!corg.equals(orgids[i])) {
							temp = temp + orgids[i] + ',';
						}
					}
					if (!"".equals(temp)) {
						if (o.isRepeatHandle(employee.getSysTOrganization()
								.getOrganizationId())) {
							if (o.isCommitFamilyNewOrgid(temp.substring(0, temp
									.length() - 1))) {
								o.updateFamilyNewOrgid(corg, temp.substring(0,
										temp.length() - 1), employee
										.getEmployeeId());
								request.setAttribute("resultstr", "迁移成功未确认");
							} else {
								request.setAttribute("resultstr", "已经迁移，但是未确认");
							}
							List<String[]> elist = o.getOrganInfo(ids + ","
									+ corg);
							request.setAttribute("elist", elist);
							request.setAttribute("blist", blist);
						} else {
							request
									.setAttribute("resultstr",
											"上次迁移操作还没有完成，请确认或者恢复迁移数据完成操作，完成后才能继续迁移操作 。");
						}
					}
				}

			}
			tx.commit();
		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}
		return mapping.findForward("organinfo");
	}
}