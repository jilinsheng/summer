/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.organ;

import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Session;
import org.hibernate.Transaction;

import com.mingda.action.oa.WritemsgAction;
import com.mingda.common.SessionFactory;
import com.mingda.common.log4j.Log4jApp;
import com.mingda.dao.SysTDictsortDAO;
import com.mingda.dao.SysTOrganizationDAO;
import com.mingda.entity.SysTDictionary;
import com.mingda.entity.SysTDictsort;
import com.mingda.entity.SysTOrganization;
import com.mingda.entity.SysTOrgext;
import com.mingda.entity.SysTOrgextId;

/**
 * MyEclipse Struts Creation date: 09-25-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class OrgansaveAction extends Action {
	static Logger log = Logger.getLogger(OrgansaveAction.class);
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		if (!this.isTokenValid(request)) {
			return mapping.findForward("error");
		}
		this.resetToken(request);

		String organizationId = request.getParameter("organizationId");
		String parentorgid = request.getParameter("parentorgid");
		String orgname = request.getParameter("orgname");
		String fullname = request.getParameter("fullname");
		SysTOrganization organ = new SysTOrganization();
		SysTOrganization porgan = new SysTOrganization();

		Session session = SessionFactory.getSession();
		Transaction tx = session.beginTransaction();

		SysTDictsortDAO dictdao = new SysTDictsortDAO();

		SysTOrganizationDAO odao = new SysTOrganizationDAO();
		String result = "";
		try {
			if (null == organizationId || "".equals(organizationId)) {
				String serno = "";
				porgan = odao.findById(parentorgid);
				BigDecimal maxno = odao.findByMaxOrg(parentorgid);
				serno = maxno.toString();
				Log4jApp.logger("新机构id:" + serno);
				organ.setParentorgid(parentorgid);
				organ
						.setDepth(new BigDecimal(
								porgan.getDepth().longValue() + 1));
				organ.setFullname(porgan.getFullname() + orgname);
				organ.setOrgname(orgname);
				organ.setStatus("1");
				organ.setOrganizationId(serno);
				int len = serno.length();
				for (int i = len; i < 10; i++) {
					serno = serno + "0";
				}
				organ.setSerialnumber(serno);

				// 扩展表
				SysTDictsort sysTDictsort = dictdao.findById(new Long(361));
				Set<SysTDictionary> set = sysTDictsort.getSysTDictionaries();
				Iterator<SysTDictionary> it = set.iterator();
				Set<SysTOrgext> exts = new HashSet(0);
				while (it.hasNext()) {
					SysTDictionary sysTDictionary = it.next();
					String a = request.getParameter("a"
							+ sysTDictionary.getDictionaryId());
					SysTOrgext ext = new SysTOrgext();
					if ("9004".equals(sysTDictionary.getDictionaryId()
							.toString())) {
						ext.setContext("0");
					} else {
						ext.setContext(a);
					}
					SysTOrgextId extid = new SysTOrgextId();
					extid.setInfomationtype(new BigDecimal(sysTDictionary
							.getDictionaryId()));
					extid.setSysTOrganization(organ);
					ext.setId(extid);
					exts.add(ext);
				}
				organ.setSysTOrgexts(exts);
				odao.save(organ);
				result = "新建下属机构：" + organ.getSerialnumber() + "  "
						+ organ.getFullname();
			} else {
				organ = odao.findById(organizationId);
				// 扩展表
				SysTDictsort sysTDictsort = dictdao.findById(new Long(361));
				Set<SysTDictionary> set = sysTDictsort.getSysTDictionaries();
				Iterator<SysTDictionary> it = set.iterator();

				Set<SysTOrgext> exts = organ.getSysTOrgexts();
				if (null != exts) {
					exts = new HashSet(0);
				}

				while (it.hasNext()) {
					SysTDictionary sysTDictionary = it.next();
					String a = request.getParameter("a"
							+ sysTDictionary.getDictionaryId());
					if (!"9004".equals(sysTDictionary.getDictionaryId()
							.toString())) {
						SysTOrgext ext = new SysTOrgext();
						ext.setContext(a);
						SysTOrgextId extid = new SysTOrgextId();
						extid.setInfomationtype(new BigDecimal(sysTDictionary
								.getDictionaryId()));
						extid.setSysTOrganization(organ);
						log.debug(organ.getOrganizationId() + "   "
								+ a);
						ext.setId(extid);
						exts.add(ext);
					}
				}
				porgan = odao.findById(parentorgid);
				organ.setFullname(porgan.getFullname() + orgname);
				organ.setOrgname(orgname);
				organ.setSysTOrgexts(exts);
				odao.save(organ);
				result = "当前机构编号为：    " + organ.getSerialnumber()
						+ "     机构修改成功！　";
			}
			// session.flush();
			tx.commit();
		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}
		try {
			PrintWriter out = response.getWriter();
			out.println(result);
			out.flush();
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
}