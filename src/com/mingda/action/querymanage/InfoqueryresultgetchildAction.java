/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.querymanage;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Iterator;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

import com.mingda.common.myjdbc.ConnectionManager;
import com.mingda.common.node.TreeHandle;
import com.mingda.common.node.TreeHandleImpl;

/**
 * MyEclipse Struts Creation date: 06-17-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class InfoqueryresultgetchildAction extends Action {
	/*
	 * Generated Methods
	 */
	static Logger log = Logger.getLogger(InfoqueryresultgetchildAction.class);
	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// 定义页面返回用的Document
		Document doc = DocumentHelper.createDocument();
		// 设置XML编码
		doc.setXMLEncoding("GB18030");
		Element root = doc.addElement("root");
		String code = request.getParameter("code");
		String objtype = request.getParameter("objtype");
		String objid = request.getParameter("objid");
		// 取出全局字典ID
		Document dictdoc = (Document) this.servlet.getServletContext()
				.getAttribute("dictionary");
		TreeHandle th = new TreeHandleImpl();

		// 如果操作节点为实体节点
		if (objtype != null && objtype.equals("ENTITY")) {
			// 取出对应的数据实体
			Element entity = (Element) th.selectSingleEntity(code,
					new Long(objid)).getRootElement().selectSingleNode(code);
			root.addElement("img").addAttribute("class", "s").addAttribute(
					"src", "/db/page/images/tree/s.gif").addAttribute(
					"onClick",
					"javascript:ChangeStatus(this,'" + code + "','ENTITY','"
							+ objid + "');");
			// 家庭ID和显示信息卡片在此操作
			root.addElement("a").addAttribute(
					"href",
					"/db/page/info/card/familyinfocard.do?code="
							+ entity.getName() + "&entityId=" + objid)
					.addAttribute("target", "operatingzone").addAttribute(
							"oncontextmenu",
							"showMenu(this,'ENTITY','" + code + "','" + objid
									+ "')").setText(
							entity.attributeValue("caption"));
			Element curNode = root.addElement("ul");

			// // 取实体节点的属性子节点信息
			// Iterator it = entity.elementIterator("property");
			// // 增加属性子点节点信息到XML中
			// while (it.hasNext()) {
			// Element element = (Element) it.next();
			// if (element.attributeValue("dicsort") != null
			// && !element.attributeValue("dicsort").equals("-1")) {
			// DictionaryHandle dh = new DictionaryHandle();
			// element.setText(dh.getDictsortToValue(dictdoc, element
			// .getText()));
			// }
			// Element li = curNode.addElement("li").addAttribute("class",
			// "Child");
			// li.addElement("img").addAttribute("class", "s").addAttribute(
			// "src", "/db/page/images/tree/s.gif").setText(
			// element.attributeValue("title") + ":"
			// + element.getText());
			// }
			// 取实体节点的结构子节点信息
			Iterator it = th.getChild(code).getRootElement().elementIterator();
			while (it.hasNext()) {
				Element element = (Element) it.next();
				Element li = curNode.addElement("li").addAttribute("class",
						"Closed");
				li.addElement("img").addAttribute("class", "s").addAttribute(
						"src", "/db/page/images/tree/s.gif").addAttribute(
						"onClick",
						"javascript:ChangeStatus(this,'" + element.getName()
								+ "','STRUCT','" + objid + "');");
				Element a = li.addElement("a");
				a.addAttribute("href",
						"/db/page/info/card/familyinfocard.do?code="
								+ element.getName() + "&entityId="
								+ element.attributeValue("ID"));// 家庭ID和显示信息卡片在此操作
				a.addAttribute("target", "operatingzone");
				a.addAttribute("oncontextmenu", "showMenu(this,'STRUCT','"
						+ element.getName() + "','" + objid + "')");
				a.setText(element.attributeValue("title"));
			}
		}
		// 如果操作节点为结构节点
		if (objtype != null && objtype.equals("STRUCT")) {
			Element struct = th.getBranch(code).getRootElement().element(code);
			root.addElement("img").addAttribute("class", "s").addAttribute(
					"src", "/db/page/images/tree/s.gif").addAttribute(
					"onClick",
					"javascript:ChangeStatus(this,'" + code + "','STRUCT','"
							+ objid + "');");
			root.addElement("a").addAttribute("herf", "#").addAttribute(
					"oncontextmenu",
					"showMenu(this,'STRUCT','" + code + "','" + objid + "')")
					.setText(struct.attributeValue("title"));
			Element curNode = root.addElement("ul");
			Iterator it = th.selectEntities(code, new Long(objid))
					.getRootElement().elementIterator();
			while (it.hasNext()) {
				Element element = (Element) it.next();
				log.debug(element.asXML());
				Element li = curNode.addElement("li").addAttribute("class",
						"Closed");
				li.addElement("img").addAttribute("class", "s").addAttribute(
						"src", "/db/page/images/tree/s.gif").addAttribute(
						"onClick",
						"javascript:ChangeStatus(this,'"
								+ element.getName()
								+ "','ENTITY','"
								+ element.selectSingleNode(
										"property[@isprimary=\"true\"]")
										.getText() + "');");
				Element a = li.addElement("a");
				a.addAttribute("herf", "#");
				a.addAttribute("oncontextmenu", "showMenu(this,'ENTITY','"
						+ element.getName()
						+ "','"
						+ element.selectSingleNode(
								"property[@isprimary=\"true\"]").getText()
						+ "')");
				a.setText(element.attributeValue("caption"));
			}
			// 取结构节点的实体子节点信息
			// 增加至页面用的XML
		}
		try {
			response.setCharacterEncoding("GB18030");
			response.setContentType("text/xml");
			PrintWriter out = response.getWriter();
			out.write(doc.asXML());
			out.flush();
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}finally{
			ConnectionManager.closeQuietly();
		}

		// request.getParameter("parentid");
		return null;
	}
}