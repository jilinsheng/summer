/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mingda.action.policy.query;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.dom4j.Document;
import org.hibernate.Session;
import org.hibernate.Transaction;

import com.mingda.common.Pager;
import com.mingda.common.SessionFactory;
import com.mingda.common.page.PageView;
import com.mingda.dao.SysTOrganizationDAO;
import com.mingda.entity.SysTEmployee;
@SuppressWarnings("unchecked")
public class NoticequeryAction extends Action {
	static Logger log = Logger.getLogger(NoticequeryAction.class);

	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		HttpSession httpsession = request.getSession();
		String orgid = request.getParameter("orgid");
		String policyId = request.getParameter("policyId");
		String sal = request.getParameter("sal");

		HttpSession hsession = request.getSession();
		Session session = SessionFactory.getSession();
		Transaction tx = session.beginTransaction();

		Document dictionary = (Document) this.servlet.getServletContext()
				.getAttribute("dictionary");
		PageView pv = new PageView();

		List<Object[]> rs = null;

		String curpage = request.getParameter("cur_page");
		String sql = "";
		String type = "";
		String value = "";

		try {

			int totalrow = 0;
			Pager page = null;
			if ("121".equals(policyId)) {
				String head = "<tr><th>家庭编号</th><th>户主姓名</th><th>证件类型</th>"
						+ "<th>证件号码</th><th>农村低保金</th><th>临时救助金</th><th>特殊救助金</th>"
						+ "<th>总金额</th><th>所属</th>	<th>地址	</th><th>保障类型</th></tr>";
				request.setAttribute("head", head);
			} else {
				String head = "<tr><th>家庭编号</th><th>户主姓名</th><th>证件类型</th>"
						+ "<th>证件号码</th>"
						+ "<th>总金额</th><th>所属</th>	<th>地址	</th><th>保障类型</th></tr>";
				request.setAttribute("head", head);
			}
			if (curpage == null || curpage.equals("")) {

				value = request.getParameter("value");
				type = request.getParameter("type");
				if ("".equals(sal) || null == sal) {
				} else {
					sal = "and	fam.dessaltype= " + sal + " ";
				}
				if ("121".equals(policyId)) {
					sql = "select t.m1,t.m2,t.m3,t.m,fam.masterpaperid,fam.familyno,fam.mastername,fam.ensurecount,"
							+ "  org.fullname,fam.famaddress,fam.family_id ,fam.masterpapertype , fam.dessaltype from info_t_familyclass cls,"
							+ " (select sum(decode(t.policy_id, 21, t.countmoney, 0)) m1,"
							+ " sum(decode(t.policy_id, 82, t.countmoney, 0)) m2,"
							+ " sum(decode(t.policy_id, 99, t.countmoney, 0)) m3,"
							+ " sum(t.countmoney) m,"
							+ " t.family_id"
							+ " from biz_t_optcheck t"
							+ " where "
							+ " t.policy_id in (21, 82, 99)"
							+ " and ((t.result in (2) and t.moneyflag=1) or t.moneyflag in (2,3,4))"
							+ " group by t.family_id) t,"
							+ " info_t_family fam,"
							+ " sys_t_organization org"
							+ " where cls.family_id = fam.family_id "
							+ sal
							+ " and fam.status ='1' and fam.family_id = t.family_id"
							+ " and org.organization_id = fam.organization_id"
							+ " and fam.organization_id like '" + orgid + "%' and fam.familyno like '" + orgid + "%'";

					HashMap cols = new HashMap();
					cols.put(4, "身份证号");
					cols.put(7, "家庭编号");
					cols.put(6, "户主姓名");
					cols.put(8, "所属");
					cols.put(9, "家庭地址");
					cols.put(0, "农村低保金");
					cols.put(1, "临时救助金");
					cols.put(2, "特殊救助金");
					cols.put(3, "总金额");
					httpsession.setAttribute("cols", cols);

				} else {
					sql = "select t.m,fam.masterpaperid,fam.familyno,fam.mastername,fam.ensurecount,"
							+ "  org.fullname,fam.famaddress,fam.family_id ,fam.masterpapertype,fam.dessaltype from info_t_familyclass cls,"
							+ " (select sum(decode(result, 2, countmoney, 8, 0, recheckmoney)) m,"
							+ " t.family_id"
							+ " from biz_t_optcheck t"
							+ " where "
							+ " t.policy_id in ("
							+ policyId
							+ ")"
							+ " and ((t.result = 2 and t.moneyflag = 1) or (t.result <> 8 and t.moneyflag in (2, 3, 4, 7)))"
							+ " group by t.family_id) t,"
							+ " info_t_family fam,"
							+ " sys_t_organization org"
							+ " where cls.family_id = fam.family_id "
							+ sal
							+ " and fam.family_id = t.family_id"
							+ " and org.organization_id = fam.organization_id"
							+ " and fam.organization_id like '" + orgid + "%'";

					HashMap cols = new HashMap();
					cols.put(1, "身份证号");
					cols.put(2, "家庭编号");
					cols.put(3, "户主姓名");
					cols.put(4, "保障人口");
					cols.put(5, "所属");
					cols.put(6, "家庭地址");
					cols.put(0, "总金额");
					httpsession.setAttribute("cols", cols);

				}

				if (type != null) {
					if (type.equals("mastername")) {
						sql += " and  fam.mastername like '%" + value + "%'";
					} else if (type.equals("paperid")) {
						sql += " and fam.masterpaperid='" + value + "'";
					} else if (type.equals("famno")) {
						sql += " and fam.familyno='" + value + "'";
					}
				}
				sql = sql + " order by fam.familyno ";
				log.debug("账单查询语句:" + sql);
				//log.debug("账单查询语句:" + sql);
				BigDecimal total = (BigDecimal) session.createSQLQuery(
						"select count(1) from ( " + sql + " )").uniqueResult();
				hsession.setAttribute("sql", sql);
				if (null != total) {
					totalrow = total.intValue();
				}
				page = new Pager(totalrow, new Long(1).intValue(), "0");
				rs = session.createSQLQuery(
						"select * from (select mytab.*, rownum row_num from ("
								+ sql + ") mytab) where row_num between "
								+ page.getBeiginrow() + " and "
								+ page.getEndrow()).list();

			} else {
				sql = (String) hsession.getAttribute("sql");
				BigDecimal total = (BigDecimal) session.createSQLQuery(
						"select count(1) from ( " + sql + " )").uniqueResult();
				hsession.setAttribute("sql", sql);
				if (null != total) {
					totalrow = total.intValue();
				}
				page = new Pager(totalrow, new Long(curpage).intValue(), "0");
				rs = session.createSQLQuery(
						"select * from (select mytab.*, rownum row_num from ("
								+ sql + ") mytab) where row_num between "
								+ page.getBeiginrow() + " and "
								+ page.getEndrow()).list();
			}
			page.setUrl("noticequery.do?&orgid=" + orgid + "&policyId="
					+ policyId);
			String html = "";
			for (Object[] o : rs) {

				String result = "";
				if ("121".equals(policyId)) {
					/*
					 * result = "<td>" +o[0].toString() + "</td><td>" +
					 * o[1].toString() + "</td><td>" + o[2].toString() +
					 * "</td>";
					 * 
					 * html +=
					 * "<tr><td><a style=\"text-decoration:none\" href=\"/db/page/info/card/newfamilyinfocard.do?entityId="
					 * + rs.getString("family_id") + "\" target=\"_blank\">" +
					 * rs.getString("familyno") + "</a></td><td>" +
					 * rs.getString("mastername") + "</td><td>" +
					 * pv.getDictionartHandle().getDictsortToValue( dictionary,
					 * rs.getString("masterpapertype")) + "</td><td>" +
					 * rs.getString("masterpaperid") + "</td><td>" +
					 * rs.getString("m") + "</td><td>" +
					 * rs.getString("fullname") + "</td><td>" + address +
					 * "</td><td>" +
					 * pv.getDictionartHandle().getDictsortToValue( dictionary,
					 * rs.getString("dessaltype")) + "</td></tr>";
					 */

				} else {
					result = "";

					BigDecimal family_id = (BigDecimal) o[7];
					if (null == family_id) {
						family_id = new BigDecimal(0);
					}

					String familyno = (String) o[2];
					if (null == familyno || "".equals(familyno)) {
						familyno = "";
					}

					String mastername = (String) o[3];
					if (null == mastername || "".equals(mastername)) {
						mastername = "";
					}

					BigDecimal masterpapertype = (BigDecimal) o[8];
					if (null == masterpapertype) {
						masterpapertype = new BigDecimal(0);
					}

					String masterpaperid = (String) o[1];
					if (null == masterpaperid || "".equals(masterpaperid)) {
						masterpaperid = "";
					}

					BigDecimal m = (BigDecimal) o[0];
					if (null == m) {
						m = new BigDecimal(0);
					}

					String fullname = (String) o[5];
					if (null == fullname || "".equals(fullname)) {
						fullname = "";
					}
					String address = (String) o[6];
					if (null == address || "".equals(address)) {
						address = "";
					}
					BigDecimal dessaltype = (BigDecimal) o[9];
					if (null == dessaltype) {
						dessaltype = new BigDecimal(0);
					}
					html += "<tr><td><a style=\"text-decoration:none\" href=\"/db/page/info/card/newfamilyinfocard.do?entityId="
							+ family_id.toString()
							+ "\" target=\"_blank\">"
							+ familyno
							+ "</a></td><td>"
							+ mastername
							+ "</td><td>"
							+ pv.getDictionartHandle().getDictsortToValue(
									dictionary, masterpapertype.toString())
							+ "</td><td>"
							+ masterpaperid
							+ "</td><td>"
							+ m.toString()
							+ "</td><td>"
							+ fullname
							+ "</td><td>"
							+ address
							+ "</td><td>"
							+ pv.getDictionartHandle().getDictsortToValue(
									dictionary, dessaltype.toString())
							+ "</td></tr>";
				}

			}
			request.setAttribute("html", html);
			request.setAttribute("toolsmenu", page.getToolsMenu());
			request.setAttribute("policyId", policyId);
			SysTEmployee employee = (SysTEmployee) httpsession
					.getAttribute("employee");
			String orgids = employee.getSysTOrganization().getOrganizationId();
			SysTOrganizationDAO organdao = new SysTOrganizationDAO();
			request.setAttribute("orglist", organdao.findByParentId(orgids));
			tx.commit();
		} catch (RuntimeException e) {
			e.printStackTrace();
		} finally {
			session.close();
		}

		return mapping.findForward("noticequery");
	}
}